{
	"$schema": "https://raw.githubusercontent.com/martinring/tmlanguage/master/tmlanguage.json",
	"name": "Inox",
	"patterns": [
		{
			"include": "#assignment-operators"
		},
		{
			"include": "#unquoted-region"
		},
		{
			"include": "#hs-script-tag-expression"
		},
		{
			"include": "#js-script-tag-expression"
		},
		{
			"include": "#style-tag-expression"
		},
		{
			"include": "#xml-expression"
		},
		{
			"include": "#css-selectors"
		},
		{
			"include": "#quoted-statements"
		},
		{
			"include": "#complex-string-patterns"
		},
		{
			"include": "#url-patterns"
		},
		{
			"include": "#option-patterns"
		},
		{
			"include": "#object-patterns"
		},
		{
			"include": "#list-patterns"
		},
		{
			"include": "#union-patterns"
		},
		{
			"include": "#pattern-declarations"
		},
		{
			"include": "#pattern-calls"
		},
		{
			"include": "#pattern-namespace-declarations"
		},
		{
			"include": "#struct-definitions"
		},
		{
			"include": "#struct-literals"
		},
		{
			"include": "#anon-struct-literals"
		},
		{
			"include": "#new-expressions"
		},
		{
			"include": "#pattern-conversions"
		},
		{
			"include": "#var-declarations"
		},
		{
			"include": "#multiline-concatenation"
		},
		{
			"include": "#extend-statement-heads"
		},
		{
			"include": "#functions"
		},
		{
			"include": "#return-type"
		},
		{
			"include": "#binary-match"
		},
		{
			"include": "#binary-div-operator"
		},
		{
			"include": "#binary-sub-operator"
		},
		{
			"include": "#keywords"
		},
		{
			"include": "#meta-call-expressions"
		},
		{
			"include": "#meta-member-expressions"
		},
		{
			"include": "#meta-identifiers"
		},
		{
			"include": "#function-calls"
		},
		{
			"include": "#key-lists"
		},
		{
			"include": "#variables"
		},
		{
			"include": "#ports"
		},
		{
			"include": "#numbers"
		},
		{
			"include": "#constants"
		},
		{
			"include": "#value-path-literals"
		},
		{
			"include": "#comments"
		},
		{
			"include": "#host-patterns"
		},
		{
			"include": "#hosts"
		},
		{
			"include": "#urls"
		},
		{
			"include": "#path-patterns"
		},
		{
			"include": "#paths"
		},
		{
			"include": "#regexps"
		},
		{
			"include": "#option-names"
		},
		{
			"include": "#strings"
		},
		{
			"include": "#template-literals"
		},
		{
			"include": "#runes"
		},
		{
			"include": "#named-patterns"
		},
		{
			"include": "#identifiers"
		},
		{
			"include": "#lists"
		},
		{
			"include": "#objects-blocks"
		}
	],
	"repository": {
		"assignment-operators": {
			"patterns": [
				{
					"name": "keyword.operator.assignment.inox",
					"match": "[-+*/]="
				}
			]
		},
		"key-lists": {
			"begin": "[.][{]",
			"beginCaptures": {
				"0": {
					"name": "punctuation.begin.bracket.curly.inox"
				}
			},
			"patterns": [
				{
					"name": "constant.language",
					"match": "[a-zA-Z_][a-zA-Z0-9_-]*\\b"
				}
			],
			"end": "[}]",
			"endCaptures": {
				"0": {
					"name": "punctuation.end.bracket.curly.inox"
				}
			}
		},
		"variables": {
			"patterns": [
				{
					"name": "variable.name",
					"match": "[$]{1,2}[A-Z_][A-Z0-9_-]*-[a-zA-Z0-9_-]+\\b"
				},
				{
					"name": "variable.other.constant",
					"match": "[$]{1,2}[A-Z_][A-Z0-9_-]*\\b"
				},
				{
					"name": "variable.name.global",
					"match": "[$]{1,2}([_a-zA-Z-]*\\b)?"
				}
			]
		},
		"ports": {
			"match": ":\\d+(/[a-zA-Z]*)?",
			"name": "constant.numeric"
		},
		"numbers": {
			"patterns": [
				{
					"comment": "date literals",
					"match": "(\\d+y)(-\\d{1,2}mt)?(-\\d{1,2}d)?(-\\d{1,2}h)?(-\\d{1,2}m)?(-\\d{1,2}s)?(-\\d{1,2}ms)?(-\\d{1,2}us)?(-[a-zA-Z_/]+[a-zA-Z_])",
					"name": "constant.numeric"
				},
				{
					"comment": "byte slice literals",
					"begin": "\\b0x\\[",
					"beginCaptures": {
						"0": {
							"name": "constant.numeric"
						}
					},
					"patterns": [
						{
							"match": "[a-fA-F0-9\\s]",
							"name": "constant.numeric"
						},
						{
							"match": "[^\\]]",
							"name": "invalid.illegal.hex-char"
						}
					],
					"end": "[\\])}]",
					"endCaptures": {
						"0": {
							"name": "constant.numeric"
						}
					}
				},
				{
					"match": "-?[0-9][0-9_]*(\\.[0-9]*(e[0-9]+)?)?[a-zA-Z]+(/[a-zA-Z]+\\b)?",
					"name": "constant.numeric"
				},
				{
					"match": "-?(?x) # turn on extended mode\n (?:\n    0       # a zero\n    |       # ...or...\n    [1-9]   # a 1-9 character\n    [0-9_]*     # followed by zero or more digits\n  )\n  (?:\n    (?:\n      \\.    # a period\n      [0-9_]+   # followed by one or more digits\n    )?\n    (?:\n      [eE]  # an e character\n      [+-]? # followed by an option +/-\n      \\d+   # followed by one or more digits\n    )?      # make exponent optional\n  )?        # make decimal portion optional",
					"name": "constant.numeric"
				}
			]
		},
		"constants": {
			"patterns": [
				{
					"name": "constant.language",
					"match": "\\b(nil|true|false)\\b"
				}
			]
		},
		"value-path-literals": {
			"patterns": [
				{
					"comment": "long value path literal",
					"name": "constant.language",
					"match": "(?<![$a-zA-Z0-9_\"')\\].-])(\\.[a-zA-Z_][a-zA-Z0-9_-]*|\\.\\[[^\\]]*\\]?)+"
				}
			]
		},
		"comments": {
			"patterns": [
				{
					"name": "comment.block.region",
					"begin": "@'",
					"end": "'"
				},
				{
					"name": "comment.block.region",
					"begin": "@`",
					"end": "`"
				},
				{
					"comment": "tutorial metadata comments",
					"begin": "(#[ \t](?:Series|Tutorial):\\s*(?:.*))(\\[.*)",
					"end": "\\n",
					"captures": {
						"1": {
							"name": "comment.line.highlighted-start"
						},
						"2": {
							"name": "comment.line.muted"
						}
					}
				},
				{
					"begin": "#[ \t!]",
					"beginCaptures": {
						"0": {
							"name": "punctuation.definition.comment"
						}
					},
					"end": "\\n",
					"name": "comment.line"
				}
			]
		},
		"host-patterns": {
			"patterns": [
				{
					"name": "string.regexp",
					"match": "%([a-zA-Z][-a-zA-Z0-9+.]*)?:\\/\\/\\*+(\\.[-a-zA-Z0-9.*]*)?(:[0-9]{1,4})?"
				},
				{
					"name": "string.regexp",
					"match": "%([a-zA-Z][-a-zA-Z0-9+.]*)?:\\/\\/([-a-zA-Z0-9.*]*)\\.\\*+(:[0-9]{1,4})?"
				}
			]
		},
		"hosts": {
			"patterns": [
				{
					"name": "string.host",
					"match": "([a-zA-Z][-a-zA-Z0-9+.]*)?:\\/\\/[-a-zA-Z0-9.]+(:[0-9]{1,5})?(?!\\*)"
				}
			]
		},
		"url-patterns": {
			"patterns": [
				{
					"name": "string.regexp.url-pattern",
					"match": "%[a-zA-Z][-a-zA-Z0-9+.]*://(?:\\w+|(?:www\\.)?[-a-zA-Z0-9@:%._+~#=]{1,32}\\.[a-zA-Z0-9()]{1,6})\\b([-a-zA-Z0-9@:%_*+.~#?&//=]{1,100})",
					"captures": {
						"1": {
							"patterns": [
								{
									"include": "#url-patterns-inner"
								}
							]
						}
					}
				}
			]
		},
		"unprefixed-url-patterns": {
			"patterns": [
				{
					"name": "string.regexp.url-pattern",
					"match": "[a-zA-Z][-a-zA-Z0-9+.]*://(?:\\w+|(?:www\\.)?[-a-zA-Z0-9@:%._+~#=]{1,32}\\.[a-zA-Z0-9()]{1,6})\\b([-a-zA-Z0-9@:%_*+.~#?&//=]{1,100})",
					"captures": {
						"1": {
							"patterns": [
								{
									"include": "#url-patterns-inner"
								}
							]
						}
					}
				}
			]
		},
		"url-patterns-inner": {
			"patterns": [
				{
					"match": "\\*",
					"name": "constant.language.special.wildcard.url-pattern.inox"
				},
				{
					"match": "(?<=/)%[a-zA-Z_][a-zA-Z0-9_-]*(?=/?)",
					"name": "constant.language.special.path-segment.url-pattern.inox"
				}
			]
		},
		"urls": {
			"patterns": [
				{
					"name": "string.interpolated.url-expression",
					"begin": "[a-zA-Z][-a-zA-Z0-9+]*//(?:\\w+|(?:www\\.)?[-a-zA-Z0-9@:%._+~#=]{1,32}\\.[a-zA-Z0-9()]{1,6})(?=[-a-zA-Z0-9@:%_+.~#?&//=]*\\{)",
					"patterns": [
						{
							"begin": "\\{",
							"beginCaptures": {
								"0": {
									"name": "punctuation.definition.template-expression.begin"
								}
							},
							"patterns": [
								{
									"include": "$self"
								}
							],
							"end": "\\}",
							"endCaptures": {
								"0": {
									"name": "punctuation.definition.template-expression.end"
								}
							}
						},
						{
							"match": "[-a-zA-Z0-9@:%_+.~#?&//=]+",
							"name": "string.unquoted.string-slice"
						}
					],
					"end": "(?=[\\s})\\],:;])"
				},
				{
					"name": "string.unquoted.url",
					"match": "[a-zA-Z][-a-zA-Z0-9+]*://(?:\\w+|(?:www\\.)?[-a-zA-Z0-9@:%._+~#=]{1,32}\\.[a-zA-Z0-9()]{1,6})\\b(?:[-a-zA-Z0-9@:%_+.~#?&//=]{0,100})"
				},
				{
					"name": "string.unquoted.scheme",
					"match": "[a-zA-Z][-a-zA-Z0-9+]*://"
				}
			]
		},
		"path-patterns": {
			"patterns": [
				{
					"name": "string.regexp.path-pattern",
					"begin": "%\\.{0,2}/(?:[:]|[^\\s\\[\\]{}(),;:|])*(?=\\{)",
					"patterns": [
						{
							"include": "#path-pattern-interpolation-inner"
						}
					],
					"end": "(?=$|[\\s})\\],;]|:(?=$|[\\s\\[\\]\\}(),;:|]))"
				},
				{
					"name": "string.regexp.path-pattern",
					"match": "%\\.{0,2}/(?:[:][^\\s\\[\\]{}(),;:|]|[^\\s\\[\\]{}(),;:|])*"
				}
			]
		},
		"path-pattern-interpolation-inner": {
			"patterns": [
				{
					"begin": "\\{",
					"beginCaptures": {
						"0": {
							"name": "punctuation.definition.template-expression.begin"
						}
					},
					"patterns": [
						{
							"include": "$self"
						}
					],
					"end": "\\}",
					"endCaptures": {
						"0": {
							"name": "punctuation.definition.template-expression.end"
						}
					}
				},
				{
					"match": "(?:[:](?![\\s\\[\\]\\}(),;:|])|[^\\s\\[\\]{}(),;:|])+",
					"name": "string.regexp.path-pattern-slice"
				}
			]
		},
		"unprefixed-path-patterns": {
			"patterns": [
				{
					"name": "string.regexp.path-pattern",
					"begin": "\\.{0,2}/(?:[:]|[^\\s\\[\\]{}(),;:|])*(?=\\{)",
					"patterns": [
						{
							"include": "#path-pattern-interpolation-inner"
						}
					],
					"end": "(?=$|[\\s})\\],;]|:(?=$|[\\s\\[\\]\\}(),;:|]))"
				},
				{
					"name": "string.regexp.path-pattern",
					"match": "\\.{0,2}/(?:[:][^\\s\\[\\]{}(),;:|]|[^\\s\\[\\]{}(),;:|])*"
				}
			]
		},
		"paths": {
			"patterns": [
				{
					"comment": "quoted path literal",
					"name": "string.unquoted",
					"match": "\\.{0,2}/`[^{}\n]*`"
				},
				{
					"comment": "quoted path expression",
					"name": "string.interpolated.path-expression",
					"begin": "\\.{0,2}/`[^{}\n`]*(?=\\{)",
					"patterns": [
						{
							"begin": "\\{",
							"beginCaptures": {
								"0": {
									"name": "punctuation.definition.template-expression.begin"
								}
							},
							"patterns": [
								{
									"include": "$self"
								}
							],
							"end": "(?:(\\})|(?=`|\\s*$))",
							"endCaptures": {
								"1": {
									"name": "punctuation.definition.template-expression.end"
								}
							}
						},
						{
							"match": "[^{}\n`]+",
							"name": "string.unquoted.string-slice"
						}
					],
					"end": "(`|\n)"
				},
				{
					"comment": "unquoted path expression",
					"name": "string.interpolated.path-expression",
					"begin": "\\.{0,2}/(?:[:]|[^\\s\\[\\]{}(),;:|])*(?=\\{)",
					"patterns": [
						{
							"begin": "\\{",
							"beginCaptures": {
								"0": {
									"name": "punctuation.definition.template-expression.begin"
								}
							},
							"patterns": [
								{
									"include": "$self"
								}
							],
							"end": "\\}",
							"endCaptures": {
								"0": {
									"name": "punctuation.definition.template-expression.end"
								}
							}
						},
						{
							"match": "(?:[:](?![\\s\\[\\]\\}(),;:|])|[^\\s\\[\\]{}(),;:|])+",
							"name": "string.unquoted.string-slice"
						}
					],
					"end": "(?=$|[\\s})\\],;]|:(?=$|[\\s\\[\\]\\}(),;:|]))"
				},
				{
					"comment": "unquoted path literal",
					"name": "string.unquoted",
					"match": "\\.{0,2}/(?:[:][^\\s\\[\\]{}(),;:|]|[^\\s\\[\\]{}(),;:|])*"
				}
			]
		},
		"option-patterns": {
			"patterns": [
				{
					"comment": "option with unprefixed named pattern",
					"match": "(%)(-{1,2}[a-zA-Z_][a-zA-Z0-9_-]*)=([a-zA-Z][a-zA-Z0-9_-]*)?",
					"captures": {
						"1": {
							"name": "support.type.inox"
						},
						"2": {
							"name": "string.unquoted.inox"
						},
						"3": {
							"name": "entity.name.type.inox"
						}
					}
				}
			]
		},
		"object-patterns": {
			"patterns": [
				{
					"begin": "%\\{",
					"beginCaptures": {
						"0": {
							"name": "punctuation.begin.bracket.curly.inox"
						}
					},
					"end": "\\}",
					"endCaptures": {
						"0": {
							"name": "punctuation.end.bracket.curly.inox"
						}
					},
					"patterns": [
						{
							"include": "#pattern-content"
						}
					]
				}
			]
		},
		"unprefixed-object-record-patterns": {
			"patterns": [
				{
					"begin": "#?\\{",
					"beginCaptures": {
						"0": {
							"name": "punctuation.begin.bracket.curly.inox"
						}
					},
					"end": "\\}",
					"endCaptures": {
						"0": {
							"name": "punctuation.end.bracket.curly.inox"
						}
					},
					"patterns": [
						{
							"include": "#pattern-content"
						}
					]
				}
			]
		},
		"list-patterns": {
			"patterns": [
				{
					"comment": "general element pattern is an object pattern",
					"begin": "%\\[\\s*\\](\\{)",
					"beginCaptures": {
						"1": {
							"name": "punctuation.begin.bracket.curly.inox"
						}
					},
					"end": "\\}",
					"endCaptures": {
						"0": {
							"name": "punctuation.end.bracket.curly.inox"
						}
					},
					"patterns": [
						{
							"include": "#pattern-content"
						}
					]
				},
				{
					"comment": "general element pattern is a record pattern",
					"begin": "%\\[\\s*\\](#\\{)",
					"beginCaptures": {
						"1": {
							"name": "punctuation.begin.bracket.curly.inox"
						}
					},
					"end": "\\}",
					"endCaptures": {
						"0": {
							"name": "punctuation.end.bracket.curly.inox"
						}
					},
					"patterns": [
						{
							"include": "#pattern-content"
						}
					]
				},
				{
					"comment": "general element pattern is a call",
					"begin": "%\\[\\s*\\]([a-zA-Z_][a-zA-Z0-9_.-]*)(\\()",
					"beginCaptures": {
						"1": {
							"name": "entity.name.type.inox"
						},
						"2": {
							"name": "punctuation.begin.bracket.inox"
						}
					},
					"end": "\\)",
					"endCaptures": {
						"0": {
							"name": "punctuation.end.bracket.inox"
						}
					},
					"patterns": [
						{
							"include": "#pattern-content"
						}
					]
				},
				{
					"comment": "declaration for a pattern call with the shorthand syntax",
					"begin": "%\\[\\s*\\]([a-zA-Z_][a-zA-Z0-9_.-]*)(\\{)",
					"beginCaptures": {
						"1": {
							"name": "entity.name.type.inox"
						},
						"2": {
							"name": "punctuation.begin.bracket.curly.inox"
						}
					},
					"end": "\\}",
					"endCaptures": {
						"0": {
							"name": "punctuation.end.bracket.curly.inox"
						}
					},
					"patterns": [
						{
							"include": "#pattern-content"
						}
					]
				},
				{
					"comment": "general element pattern is a named pattern or a pattern namespace member",
					"match": "%\\[\\s*\\]([a-zA-Z_][a-zA-Z0-9_.-]*)\\b(?!\\{|\\()",
					"captures": {
						"1": {
							"name": "entity.name.type.inox"
						}
					}
				},
				{
					"comment": "known length",
					"begin": "%\\[",
					"beginCaptures": {
						"0": {
							"name": "punctuation.begin.bracket.inox"
						}
					},
					"end": "\\]",
					"endCaptures": {
						"0": {
							"name": "punctuation.end.bracket.inox"
						}
					},
					"patterns": [
						{
							"include": "#pattern-content"
						}
					]
				}
			]
		},
		"unprefixed-list-patterns": {
			"patterns": [
				{
					"begin": "\\[",
					"beginCaptures": {
						"0": {
							"name": "punctuation.begin.bracket.inox"
						}
					},
					"end": "\\]",
					"endCaptures": {
						"0": {
							"name": "punctuation.end.bracket.inox"
						}
					},
					"patterns": [
						{
							"include": "#pattern-content"
						}
					]
				}
			]
		},
		"union-patterns": {
			"patterns": [
				{
					"begin": "%\\|",
					"end": "(?=[:,;\\)\\]\n\\}])",
					"patterns": [
						{
							"match": "\\b([a-zA-Z_][a-zA-Z0-9._-]*)\\b",
							"comment": "unprefixed pattern name",
							"name": "entity.name.type.inox"
						},
						{
							"include": "#pattern-content"
						}
					]
				}
			]
		},
		"pattern-content": {
			"patterns": [
				{
					"include": "#constants"
				},
				{
					"include": "#keywords"
				},
				{
					"include": "#url-patterns"
				},	
				{
					"include": "#meta-call-expressions"
				},
				{
					"include": "#meta-member-expressions"
				},
				{
					"include": "#meta-identifiers"
				},
				{
					"include": "#unprefixed-string-patterns"
				},
				{
					"include": "#unprefixed-regexps"
				},
				{
					"include": "#unprefixed-path-patterns"
				},
				{
					"include": "#unprefixed-url-patterns"
				},
				{
					"match": "\\b([a-zA-Z_][a-zA-Z0-9._-]*)\\b(?![-a-zA-Z0-9_]*[?]?:)",
					"comment": "unprefixed pattern name, the regex does not support last pattern names in union patterns",
					"name": "entity.name.type.inox"
				},
				{
					"begin": "\\(",
					"patterns": [
						{
							"include": "#pattern-content"
						}
					],
					"end": "\\)"
				},
				{
					"match": "\\|"
				},
				{
					"comment": "This pattern needs to be present here because of #unprefixed-object-record-patterns",
					"include": "#unquoted-region"
				},
				{
					"include": "#unprefixed-list-patterns"
				},
				{
					"include": "#unprefixed-object-record-patterns"
				},
				{
					"comment": "exact values starting with '$'",
					"begin": "(?=\\$)",
					"patterns": [
						{
							"begin": "(?=)\\[",
							"patterns": [
								{
									"include": "$self"
								}
							],
							"end": "(?<=\\])"
						},
						{
							"begin": "(?=)\\{",
							"patterns": [
								{
									"include": "$self"
								}
							],
							"end": "(?<=\\})"
						},
						{
							"begin": "(?=)\\(",
							"patterns": [
								{
									"include": "$self"
								}
							],
							"end": "(?<=\\))"
						},
						{
							"include": "$self"
						}
					],
					"end": "(?=[,:)\\}\\]])"
				},
				{
					"include": "#expressions-and-comments"
				}
			]
		},
		"pattern-declarations": {
			"patterns": [
				{
					"comment": "declaration for a simple pattern",
					"begin": "^\\s*(pattern)[ \t]+(?:([a-zA-Z_][a-zA-Z0-9_-]*)|(<\\{.*?\\}>))[ \t]*=\\s*(?=`|[.]{0,2}/|[a-zA-Z][-a-zA-Z0-9+.]*://)",
					"beginCaptures": {
						"1": {
							"name": "keyword.other.inox"
						},
						"2": {
							"name": "entity.name.type.inox"
						},
						"3": {
							"patterns": [
								{
									"include": "$self"
								}
							]
						}
					},
					"end": "$",
					"patterns": [
						{
							"include": "#pattern-content"
						}
					]
				},
				{
					"comment": "declaration for an object or record pattern",
					"begin": "^\\s*(pattern)[ \t]+(?:([a-zA-Z_][a-zA-Z0-9_-]*)|(<\\{.*?\\}>))[ \t]*=(?:[ \t]*@)?[ \t]*(#?\\{)",
					"beginCaptures": {
						"1": {
							"name": "keyword.other.inox"
						},
						"2": {
							"name": "entity.name.type.inox"
						},
						"3": {
							"patterns": [
								{
									"include": "$self"
								}
							]
						},
						"4": {
							"name": "punctuation.begin.bracket.curly.inox"
						}
					},
					"end": "\\}",
					"endCaptures": {
						"0": {
							"name": "punctuation.end.bracket.curly.inox"
						}
					},
					"patterns": [
						{
							"include": "#pattern-content"
						}
					]
				},
				{
					"comment": "declaration for a list or tuple pattern with an element pattern",
					"begin": "^\\s*(pattern)[ \t]+(?:([a-zA-Z_][a-zA-Z0-9_-]*)|(<\\{.*?\\}>))[ \t]*=(?:[ \t]*@)?[ \t]*(#?\\[)\\s*(\\])(?=[a-zA-Z_%#{\\[])",
					"beginCaptures": {
						"1": {
							"name": "keyword.other.inox"
						},
						"2": {
							"name": "entity.name.type.inox"
						},
						"3": {
							"patterns": [
								{
									"include": "$self"
								}
							]
						},
						"4": {
							"name": "punctuation.begin.bracket.inox"
						},
						"5": {
							"name": "punctuation.end.bracket.inox"
						}
					},
					"end": "(;|\\}|\\]|$)",
					"endCaptures": {
						"0": {
							"name": "punctuation.end.bracket.curly.inox"
						}
					},
					"patterns": [
						{
							"include": "#pattern-content"
						}
					]
				},
				{
					"comment": "declaration for a list or tuple pattern with a known length",
					"begin": "^\\s*(pattern)[ \t]+(?:([a-zA-Z_][a-zA-Z0-9_-]*)|(<\\{.*?\\}>))[ \t]*=(?:[ \t]*@)?[ \t]*(#?\\[)",
					"beginCaptures": {
						"1": {
							"name": "keyword.other.inox"
						},
						"2": {
							"name": "entity.name.type.inox"
						},
						"3": {
							"patterns": [
								{
									"include": "$self"
								}
							]
						},
						"4": {
							"name": "punctuation.begin.bracket.inox"
						}
					},
					"end": "\\]",
					"endCaptures": {
						"0": {
							"name": "punctuation.end.bracket.inox"
						}
					},
					"patterns": [
						{
							"include": "#pattern-content"
						}
					]
				},
				{
					"comment": "declaration for a parenthesized pattern",
					"begin": "^\\s*(pattern)[ \t]+(?:([a-zA-Z_][a-zA-Z0-9_-]*)|(<\\{.*?\\}>))[ \t]*=(?:[ \t]*@)?[ \t]*(\\()",
					"beginCaptures": {
						"1": {
							"name": "keyword.other.inox"
						},
						"2": {
							"name": "entity.name.type.inox"
						},
						"3": {
							"patterns": [
								{
									"include": "$self"
								}
							]
						},
						"4": {
							"name": "punctuation.begin.bracket.curly.inox"
						}
					},
					"end": "\\)",
					"endCaptures": {
						"0": {
							"name": "punctuation.end.bracket.curly.inox"
						}
					},
					"patterns": [
						{
							"include": "#pattern-content"
						}
					]
				},
				{
					"comment": "declaration for an complex string pattern",
					"begin": "^\\s*(pattern)[ \t]+(?:([a-zA-Z_][a-zA-Z0-9_-]*)|(<\\{.*?\\}>))[ \t]*=(?:[ \t]*@)?[ \t]*(%?str)(\\()",
					"beginCaptures": {
						"1": {
							"name": "keyword.other.inox"
						},
						"2": {
							"name": "entity.name.type.inox"
						},
						"3": {
							"patterns": [
								{
									"include": "$self"
								}
							]
						},
						"4": {
							"name": "entity.name.type.inox"
						},
						"5": {
							"name": "punctuation.begin.bracket.inox"
						}
					},
					"end": "\\)",
					"endCaptures": {
						"0": {
							"name": "punctuation.end.bracket.inox"
						}
					},
					"patterns": [
						{
							"include": "#complex-string-pattern-content"
						}
					]
				},
				{
					"comment": "declaration for a pattern call",
					"begin": "^\\s*(pattern)[ \t]+(?:([a-zA-Z_][a-zA-Z0-9_-]*)|(<\\{.*?\\}>))[ \t]*=(?:[ \t]*@)?[ \t]*([a-zA-Z_][a-zA-Z0-9_.-]*)(\\()",
					"beginCaptures": {
						"1": {
							"name": "keyword.other.inox"
						},
						"2": {
							"name": "entity.name.type.inox"
						},
						"3": {
							"patterns": [
								{
									"include": "$self"
								}
							]
						},
						"4": {
							"name": "entity.name.type.inox"
						},
						"5": {
							"name": "punctuation.begin.bracket.inox"
						}
					},
					"end": "\\)",
					"endCaptures": {
						"0": {
							"name": "punctuation.end.bracket.inox"
						}
					},
					"patterns": [
						{
							"include": "#pattern-content"
						}
					]
				},
				{
					"comment": "declaration for a pattern call with the shorthand syntax",
					"begin": "^\\s*(pattern)[ \t]+(?:([a-zA-Z_][a-zA-Z0-9_-]*)|(<\\{.*?\\}>))[ \t]*=(?:[ \t]*@)?[ \t]*([a-zA-Z_][a-zA-Z0-9_.-]*)(\\{)",
					"beginCaptures": {
						"1": {
							"name": "keyword.other.inox"
						},
						"2": {
							"name": "entity.name.type.inox"
						},
						"3": {
							"patterns": [
								{
									"include": "$self"
								}
							]
						},
						"4": {
							"name": "entity.name.type.inox"
						},
						"5": {
							"name": "punctuation.begin.bracket.inox"
						}
					},
					"end": "\\}",
					"endCaptures": {
						"0": {
							"name": "punctuation.end.bracket.curly.inox"
						}
					},
					"patterns": [
						{
							"include": "#pattern-content"
						}
					]
				},
				{
					"comment": "declaration for a named pattern or pattern namespace member",
					"match": "^\\s*(pattern)[ \t]+(?:([a-zA-Z_][a-zA-Z0-9_-]*)|(<\\{.*?\\}>))[ \t]*=(?:[ \t]*@)?[ \t]*([a-zA-Z_][a-zA-Z0-9_.-]*)\\b(?!=\\{|\\()",
					"captures": {
						"1": {
							"name": "keyword.other.inox"
						},
						"2": {
							"name": "entity.name.type.inox"
						},
						"3": {
							"patterns": [
								{
									"include": "$self"
								}
							]
						},
						"4": {
							"name": "entity.name.type.inox"
						}
					}
				},
				{
					"comment": "declaration for a pattern union",
					"begin": "^\\s*(pattern)[ \t]+(?:([a-zA-Z_][a-zA-Z0-9_-]*)|(<\\{.*?\\}>))[ \t]*=(?:[ \t]*@)?[ \t]*\\|",
					"beginCaptures": {
						"1": {
							"name": "keyword.other.inox"
						},
						"2": {
							"name": "entity.name.type.inox"
						},
						"3": {
							"patterns": [
								{
									"include": "$self"
								}
							]
						}
					},
					"end": "(?=(#[ \t!][^\n]*)?\\s*\n)",
					"patterns": [
						{
							"include": "#pattern-content"
						}
					]
				},
				{
					"comment": "declaration without a RHS",
					"match": "^\\s*(pattern\\b)(?:\\s*$|[ \t]+(?:([a-zA-Z_][a-zA-Z0-9_-]*)|(<\\{.*?\\}>))[ \t]*)",
					"captures": {
						"1": {
							"name": "keyword.other.inox"
						},
						"2": {
							"name": "entity.name.type.inox"
						},
						"3": {
							"patterns": [
								{
									"include": "$self"
								}
							]
						}
					}
				}
			]
		},
		"pattern-calls": {
			"patterns": [
				{
					"comment": "prefixed pattern call",
					"begin": "(%[a-zA-Z_][a-zA-Z0-9_.-]*)([(])",
					"beginCaptures": {
						"1": {
							"name": "entity.name.type.inox"
						},
						"2": {
							"name": "punctuation.begin.bracket.inox"
						}
					},
					"patterns": [
						{
							"include": "#pattern-content"
						}
					],
					"end": "[)]",
					"endCaptures": {
						"0": {
							"name": "punctuation.end.bracket.inox"
						}
					}
				},
				{
					"comment": "prefixed pattern call with shorthand syntax",
					"begin": "(%[a-zA-Z_][a-zA-Z0-9_.-]*)([{])",
					"beginCaptures": {
						"1": {
							"name": "entity.name.type.inox"
						},
						"2": {
							"name": "punctuation.begin.curly.bracket.inox"
						}
					},
					"patterns": [
						{
							"include": "#pattern-content"
						}
					],
					"end": "[}]",
					"endCaptures": {
						"0": {
							"name": "punctuation.end.curly.bracket.inox"
						}
					}
				}
			]
		},
		"pattern-namespace-declarations": {
			"patterns": [
				{
					"match": "^\\s*(pnamespace)[ \t]+(?:([a-zA-Z_][a-zA-Z0-9_-]*[.]?|(<\\{.*?\\}>)))?[ \t]*",
					"captures": {
						"1": {
							"name": "keyword.other.inox"
						},
						"2": {
							"name": "entity.name.type.inox"
						},
						"3": {
							"patterns": [
								{
									"include": "$self"
								}
							]
						}
					}
				}
			]
		},
		"struct-definitions": {
			"patterns": [
				{
					"comment": "struct with body",
					"match": "^\\s*(struct)[ \t]+([a-zA-Z_][a-zA-Z0-9_-]*)?[ \t]*(?=\\s*($|#))",
					"captures": {
						"1": {
							"name": "keyword.other.inox"
						},
						"2": {
							"name": "entity.name.type.inox"
						}
					}
				},
				{
					"comment": "struct with body",
					"begin": "^\\s*(struct)[ \t]+([a-zA-Z_][a-zA-Z0-9_-]*)[ \t]*(\\{)",
					"beginCaptures": {
						"1": {
							"name": "keyword.other.inox"
						},
						"2": {
							"name": "entity.name.type.inox"
						},
						"3": {
							"name": "punctuation.begin.bracket.curly.inox"
						}
					},
					"end": "\\}",
					"endCaptures": {
						"0": {
							"name": "punctuation.end.bracket.curly.inox"
						}
					},
					"patterns": [
						{
							"comment": "field whose type is a parenthesized pattern call",
							"begin": "^\\s*(?!fn\\b)([a-zA-Z_][a-zA-Z0-9_-]*)[ \t]+([a-zA-Z_][a-zA-Z0-9_-]*)(\\()",
							"beginCaptures": {
								"1": {
									"name": "variable.field.inox"
								},
								"2": {
									"name": "entity.name.type.inox"
								},
								"3": {
									"name": "punctuation.begin.bracket.inox"
								}
							},
							"end": "\\)",
							"endCaptures": {
								"0": {
									"name": "punctuation.end.bracket.inox"
								}
							},
							"patterns": [
								{
									"include": "#pattern-content"
								}
							]
						},
						{
							"comment": "field whose type is a pattern call with the shorthand syntax",
							"begin": "^\\s*(?!fn\\b)([a-zA-Z_][a-zA-Z0-9_-]*)[ \t]+([a-zA-Z_][a-zA-Z0-9_-]*)(\\{)",
							"beginCaptures": {
								"1": {
									"name": "variable.field.inox"
								},
								"2": {
									"name": "entity.name.type.inox"
								},
								"3": {
									"name": "punctuation.begin.bracket.curly.inox"
								}
							},
							"end": "\\}",
							"endCaptures": {
								"0": {
									"name": "punctuation.end.bracket.curly.inox"
								}
							},
							"patterns": [
								{
									"include": "#pattern-content"
								}
							]
						},
						{
							"comment": "field",
							"match": "^\\s*(?!fn\\b)([a-zA-Z_][a-zA-Z0-9_-]*)[ \t]+(.*)(?=\\s*($|#.*))",
							"captures": {
								"1": {
									"name": "variable.field.inox"
								},
								"2": {
									"patterns": [
										{
											"include": "#pattern-content"
										}
									]
								}
							}
						},
						{
							"include": "$self"
						}
					]
				}
			]
		},
		"struct-literals": {
			"begin": "\\b(struct).([a-zA-Z_][a-zA-Z0-9_-]*)(\\{)",
			"beginCaptures": {
				"1": {
					"name": "keyword.other.inox"
				},
				"2": {
					"name": "entity.name.function"
				}
			},
			"end": "\\}",
			"endCaptures": {
				"0": {
					"name": "punctuation.end.bracket.curly.inox"
				}
			},
			"patterns": [
				{
					"include": "$self"
				}
			]
		},
		"new-expressions": {
			"patterns": [
				{
					"comment": "with initialization",
					"begin": "\\b(new)\\s+([a-zA-Z_][a-zA-Z0-9_-]*)\\s*(\\{)",
					"beginCaptures": {
						"1": {
							"name": "keyword.other.inox"
						},
						"2": {
							"name": "entity.name.type"
						}
					},
					"end": "\\}",
					"endCaptures": {
						"0": {
							"name": "punctuation.end.bracket.curly.inox"
						}
					},
					"patterns": [
						{
							"include": "$self"
						}
					]
				},
				{
					"comment": "without initialization",
					"match": "\\b(new)\\s+([a-zA-Z_][a-zA-Z0-9_-]*)\\s*(?!\\{)",
					"captures": {
						"1": {
							"name": "keyword.other.inox"
						},
						"2": {
							"name": "entity.name.type"
						}
					}
				}
			]
		},
		"anon-struct-literals": {
			"begin": "\\b(struct)(\\{)",
			"beginCaptures": {
				"1": {
					"name": "keyword.other.inox"
				},
				"2": {
					"name": "punctuation.begin.bracket.curly.inox"
				}
			},
			"end": "\\}",
			"endCaptures": {
				"0": {
					"name": "punctuation.end.bracket.curly.inox"
				}
			},
			"patterns": [
				{
					"include": "$self"
				}
			]
		},
		"pattern-conversions": {
			"patterns": [
				{
					"begin": "%\\(",
					"beginCaptures": {
						"0": {
							"name": "punctuation.begin.bracket.inox"
						}
					},
					"end": "\\)",
					"endCaptures": {
						"0": {
							"name": "punctuation.end.bracket.inox"
						}
					},
					"patterns": [
						{
							"include": "$self"
						}
					]
				}
			]
		},
		"var-declarations": {
			"patterns": [
				{
					"match": "(?:^[ \t]+)(\\b(?:global)?var)[ \t]+(?:([a-zA-Z_][a-zA-Z0-9_-]*)|(<\\{.*?\\}>))[ \t]+(.*?)[ \t]*(?=$|=)",
					"captures": {
						"1": {
							"name": "storage.type.inox"
						},
						"2": {
							"name": "variable.name.inox"
						},
						"3": {
							"patterns": [
								{
									"include": "$self"
								}
							]
						},
						"4": {
							"patterns": [
								{
									"include": "#pattern-content"
								}
							]
						}
					}
				},
				{
					"match": "(\\b(?:global)?var)[ \t]+(?:([a-zA-Z_][a-zA-Z0-9_-]*)|(<\\{.*?\\}>))[ \t]+(.*?)[ \t]*(?=$|=)",
					"captures": {
						"1": {
							"name": "storage.type.inox"
						},
						"2": {
							"name": "variable.name.inox"
						},
						"3": {
							"patterns": [
								{
									"include": "$self"
								}
							]
						},
						"4": {
							"patterns": [
								{
									"include": "#pattern-content"
								}
							]
						}
					}
				},
				{
					"begin": "(\\b(?:global)?var)[ \t]+(\\()",
					"beginCaptures": {
						"1": {
							"name": "storage.type.inox"
						},
						"2": {
							"name": "punctuation.definition.variables.begin.bracket.round.inox"
						}
					},
					"end": "\\)",
					"endCaptures": {
						"0": {
							"name": "punctuation.definition.variables.end.bracket.round.inox"
						}
					},
					"patterns": [
						{
							"include": "#single-local-var-declaration"
						},
						{
							"include": "$self"
						}
					]
				}
			]
		},
		"single-local-var-declaration": {
			"comment": "TODO: fix",
			"match": "(?<=^|,|\\()[ \t]*(?:([a-zA-Z_][a-zA-Z0-9_-]*)|(<\\{.*?\\}>))[ \t]+(.*?)[ \t]*(?=$|=|\\))",
			"captures": {
				"1": {
					"name": "variable.name.inox"
				},
				"2": {
					"patterns": [
						{
							"include": "$self"
						}
					]
				},
				"3": {
					"patterns": [
						{
							"match": "([a-zA-Z_][a-zA-Z0-9._-]*)\\b",
							"name": "entity.name.type.inox"
						},
						{
							"include": "#named-patterns"
						}
					]
				}
			}
		},
		"extend-statement-heads": {
			"patterns": [
				{
					"comment": "extension of an object pattern",
					"begin": "^\\s*(extend)[ \t]+(?:[ \t]*@)?[ \t]*(\\{)",
					"beginCaptures": {
						"1": {
							"name": "keyword.other.inox"
						},
						"2": {
							"name": "punctuation.begin.bracket.curly.inox"
						}
					},
					"end": "\\}",
					"endCaptures": {
						"0": {
							"name": "punctuation.end.bracket.curly.inox"
						}
					},
					"patterns": [
						{
							"include": "#pattern-content"
						}
					]
				},
				{
					"comment": "extension of a list pattern with an element pattern",
					"begin": "^\\s*(extend)[ \t]+(?:[ \t]*@)?[ \t]*(\\[)\\s*(\\])(?=[a-zA-Z_%#{\\[])",
					"beginCaptures": {
						"1": {
							"name": "keyword.other.inox"
						},
						"2": {
							"name": "punctuation.begin.bracket.inox"
						},
						"3": {
							"name": "punctuation.end.bracket.inox"
						}
					},
					"end": "(;|\\}|\\]|$)",
					"endCaptures": {
						"0": {
							"name": "punctuation.end.bracket.curly.inox"
						}
					},
					"patterns": [
						{
							"include": "#pattern-content"
						}
					]
				},
				{
					"comment": "extension of a list pattern with a known length",
					"begin": "^\\s*(extend)[ \t]+(?:[ \t]*@)?[ \t]*(\\[)",
					"beginCaptures": {
						"1": {
							"name": "keyword.other.inox"
						},
						"2": {
							"name": "punctuation.begin.bracket.inox"
						}
					},
					"end": "\\]",
					"endCaptures": {
						"0": {
							"name": "punctuation.end.bracket.inox"
						}
					},
					"patterns": [
						{
							"include": "#pattern-content"
						}
					]
				},
				{
					"comment": "extension of a parenthesized pattern",
					"begin": "^\\s*(extend)[ \t]+(?:[ \t]*@)?[ \t]*(\\()",
					"beginCaptures": {
						"1": {
							"name": "keyword.other.inox"
						},
						"2": {
							"name": "punctuation.begin.bracket.curly.inox"
						}
					},
					"end": "\\)",
					"endCaptures": {
						"0": {
							"name": "punctuation.end.bracket.curly.inox"
						}
					},
					"patterns": [
						{
							"include": "#pattern-content"
						}
					]
				},
				{
					"comment": "extension for a pattern call",
					"begin": "^\\s*(extend)[ \t]+(?:[ \t]*@)?[ \t]*([a-zA-Z_][a-zA-Z0-9_.-]*)(\\()",
					"beginCaptures": {
						"1": {
							"name": "keyword.other.inox"
						},
						"2": {
							"name": "entity.name.type.inox"
						},
						"3": {
							"name": "punctuation.begin.bracket.inox"
						}
					},
					"end": "\\)",
					"endCaptures": {
						"0": {
							"name": "punctuation.end.bracket.inox"
						}
					},
					"patterns": [
						{
							"include": "#pattern-content"
						}
					]
				},
				{
					"comment": "extension of a pattern call with the shorthand syntax",
					"begin": "^\\s*(extend)[ \t]+(?:[ \t]*@)?[ \t]*([a-zA-Z_][a-zA-Z0-9_.-]*)(\\{)",
					"beginCaptures": {
						"1": {
							"name": "keyword.other.inox"
						},
						"2": {
							"name": "entity.name.type.inox"
						},
						"3": {
							"name": "punctuation.begin.bracket.inox"
						}
					},
					"end": "\\}",
					"endCaptures": {
						"0": {
							"name": "punctuation.end.bracket.curly.inox"
						}
					},
					"patterns": [
						{
							"include": "#pattern-content"
						}
					]
				},
				{
					"comment": "extension of a named pattern or pattern namespace member",
					"match": "^\\s*(extend)[ \t]+(?:[ \t]*@)?[ \t]*([a-zA-Z_][a-zA-Z0-9_.-]*)\\b(?!=\\{|\\()",
					"captures": {
						"1": {
							"name": "keyword.other.inox"
						},
						"2": {
							"name": "entity.name.type.inox"
						}
					}
				},
				{
					"comment": "extension of a pattern union. TODO: fix end regexp (also used in the declaration of a pattern union)",
					"begin": "^\\s*(extend)[ \t]+(?:[ \t]*@)?[ \t]*\\|",
					"beginCaptures": {
						"1": {
							"name": "keyword.other.inox"
						}
					},
					"end": "(?=(#[ \t!][^\n]*)?\\s*\n)",
					"patterns": [
						{
							"include": "#pattern-content"
						}
					]
				},
				{
					"comment": "extension without a LHS",
					"match": "^\\s*(extend)[ \t]+",
					"captures": {
						"1": {
							"name": "keyword.other.inox"
						}
					}
				}
			]
		},
		"functions": {
			"patterns": [
				{
					"comment": "Function declarations",
					"begin": "((?:^\\s*|\\b)fn)(?:\\b|\\[([^\\]]*)\\]?)\\s+(?:(\\w+)|(<\\{.*?\\}>))\\s*\\(",
					"beginCaptures": {
						"1": {
							"name": "keyword.function.inox"
						},
						"2": {
							"patterns": [
								{
									"include": "#identifiers"
								}
							]
						},
						"3": {
							"name": "entity.name.function.inox"
						},
						"4": {
							"patterns": [
								{
									"include": "#expressions-and-comments"
								}
							]
						}
					},
					"patterns": [
						{
							"include": "#function-parameters"
						}
					],
					"end": "\\)"
				},
				{
					"comment": "Function expressions",
					"begin": "(\\bfn)(?:\\b|\\[([^\\]]*)\\]?)\\s*\\(",
					"beginCaptures": {
						"1": {
							"name": "keyword.function.inox"
						},
						"2": {
							"patterns": [
								{
									"include": "#identifiers"
								}
							]
						}
					},
					"patterns": [
						{
							"include": "#function-parameters"
						}
					],
					"end": "\\)"
				},
				{
					"comment": "function body",
					"begin": "(?<=\\))\\s*\\{",
					"patterns": [
						{
							"include": "$self"
						}
					],
					"end": "\\}"
				}
			]
		},
		"function-parameters": {
			"patterns": [
				{
					"match": "(?<=^\\s*|[(,.]\\s*)([_a-zA-Z-]+)(\\s+|\\s*(?=[),])|\\s+(?!=[),]))",
					"name": "variable.name.inox"
				},
				{
					"match": "\\|"
				},
				{
					"include": "#pattern-content"
				},
				{
					"include": "#expressions-and-comments"
				}
			]
		},
		"return-type": {
			"patterns": [
				{
					"match": "(?<=\\))\\s*(?=(and|or|not-in|keyof|urlof|match|not-match|substrof|is|is-not)\\b[^-_])",
					"comment": "ignore binary expressions"
				},
				{
					"comment": "return type is a simple pattern",
					"begin": "(?<=\\))\\s*(?=((`|[.]{0,2}/|[a-zA-Z][-a-zA-Z0-9+.]*://).*)\\s*(\\{|=>))",
					"patterns": [
						{
							"include": "#pattern-content"
						}
					],
					"end": "(?=\\{|=>)"
				},
				{
					"comment": "return type is a list or tuple pattern with a an object or record as general element",
					"begin": "(?<=\\))\\s*(?=#?\\[\\s*\\]#?\\{)",
					"patterns": [
						{
							"include": "#pattern-content"
						}
					],
					"end": "(?<=\\})(?=\\s*\\{)"
				},
				{
					"comment": "return type is a list or tuple pattern",
					"begin": "(?<=\\))\\s*(?=#?\\[)",
					"patterns": [
						{
							"include": "#pattern-content"
						}
					],
					"end": "(?<=\\])(?=\\s*\\{)"
				},
				{
					"comment": "return type is a record pattern",
					"begin": "(?<=\\))\\s*(?=#\\{)",
					"patterns": [
						{
							"include": "#pattern-content"
						}
					],
					"end": "(?<=\\})(?=\\s*(\\{|=>))"
				},
				{
					"comment": "return type is a call",
					"begin": "(?<=\\))\\s*([a-zA-Z_][a-zA-Z0-9_-]*)(\\()",
					"beginCaptures": {
						"1": {
							"name": "entity.name.type.inox"
						},
						"2": {
							"name": "punctuation.begin.bracket.inox"
						}
					},
					"end": "\\)",
					"endCaptures": {
						"0": {
							"name": "punctuation.end.bracket.inox"
						}
					},
					"patterns": [
						{
							"include": "#pattern-content"
						}
					]
				},
				{
					"comment": "return type is pattern call with the shorthand syntax",
					"begin": "(?<=\\))\\s*([a-zA-Z_][a-zA-Z0-9_-]*)(\\{)",
					"beginCaptures": {
						"1": {
							"name": "entity.name.type.inox"
						},
						"2": {
							"name": "punctuation.begin.bracket.curly.inox"
						}
					},
					"end": "\\}",
					"endCaptures": {
						"0": {
							"name": "punctuation.end.bracket.curly.inox"
						}
					},
					"patterns": [
						{
							"include": "#pattern-content"
						}
					]
				},
				{
					"comment": "return type is named pattern or a pattern namespace member",
					"match": "(?<=\\))\\s*([a-zA-Z_][a-zA-Z0-9_.-]*)(?=\\s+\\{|\\s*=>|\\s+$)",
					"captures": {
						"1": {
							"name": "entity.name.type.inox"
						},
						"2": {
							"name": "punctuation.begin.bracket.curly.inox"
						}
					}
				},
				{
					"comment": "parenthesized return type, the space in the regex is present to avoid matching calls of the form (...)(arg)",
					"begin": "(?<=\\))\\s+(?=[(])",
					"patterns": [
						{
							"include": "#pattern-content"
						}
					],
					"end": "(?<=[)])(?=\\s*(\\{|=>))"
				},
				{
					"comment": "return type is a pointer type",
					"match": "(?<=\\))\\s*[*]([a-zA-Z_][a-zA-Z0-9_.-]*)(?=\\s*\\{|\\s*=>|\\s+$)",
					"captures": {
						"1": {
							"name": "entity.name.type.inox"
						},
						"2": {
							"name": "punctuation.begin.bracket.curly.inox"
						}
					}
				},
				{
					"comment": "return type is an array - 0",
					"begin": "(?<=\\bfn\\b.*?\\))\\s*(?=\\[)",
					"patterns": [
						{
							"include": "#pattern-content"
						}
					],
					"end": "(?=\\s*(\\{|=>))"
				},
				{
					"comment": "return type is an array - 1",
					"begin": "(?<=\\))\\s+(?=\\[)",
					"patterns": [
						{
							"include": "#pattern-content"
						}
					],
					"end": "(?=\\s*(\\{|=>))"
				},
				{
					"comment": "other return types",
					"begin": "(?<=\\))\\s*(?=[_%])",
					"patterns": [
						{
							"include": "#pattern-content"
						}
					],
					"end": "(?=\\s*(\\{|=>))"
				}
			]
		},
		"binary-div-operator": {
			"patterns": [
				{
					"match": "(?<=[a-z0-9_?()\\]}])\\s+(/)(?=\\)|\\s*$)",
					"comment": "the surrounding spaces should be kept because removing them causes the regexp to match paths or unquoted strings",
					"captures": {
						"1": {
							"name": "keyword.operator.inox"
						}
					}
				},
				{
					"match": "(?<=[a-z0-9_?()\\]}])\\s+(/)(?=\\s+[,a-z0-9_()\\]}])",
					"comment": "the surrounding spaces should be kept because removing them causes the regexp to match paths or unquoted strings",
					"captures": {
						"1": {
							"name": "keyword.operator.inox"
						}
					}
				}
			]
		},
		"binary-sub-operator": {
			"patterns": [
				{
					"match": "(?<=[a-z0-9_?()\\]}])\\s+(-)(?=\\)|\\s*$)",
					"comment": "the surrounding spaces should be kept because removing them causes the regexp to match unquoted strings",
					"captures": {
						"1": {
							"name": "keyword.operator.inox"
						}
					}
				},
				{
					"match": "(?<=[a-z0-9_?()\\]}])\\s+(-)(?=\\s+[,a-z0-9_()\\]}])",
					"comment": "the surrounding spaces should be kept because removing them causes the regexp to match unquoted strings",
					"captures": {
						"1": {
							"name": "keyword.operator.inox"
						}
					}
				}
			]
		},
		"binary-match": {
			"patterns": [
				{
					"comment": "missing right operand",
					"begin": "(?<!^\\s*|[=(\\[{,:]\\s*)(match|not-match)\\b\\s*(?=\\s*($|\\)))",
					"beginCaptures": {
						"1": {
							"name": "keyword.operator.expression.inox"
						}
					},
					"patterns": [
						{
							"include": "#pattern-content"
						}
					],
					"end": "(?<!\\G)(?=[{)\\n])"
				},
				{
					"comment": "in 'end' `]` is for list/tuple patterns with a general element pattern starting with '{'",
					"begin": "(?<!^\\s*|[=(\\[{,:]\\s*)(match|not-match)\\b\\s*(?=[.]{0,2}/|[a-zA-Z][-a-zA-Z0-9+.]*://|[`$a-zA-Z0-9{\\[\\|\\(%])",
					"beginCaptures": {
						"1": {
							"name": "keyword.operator.expression.inox"
						}
					},
					"patterns": [
						{
							"include": "#pattern-content"
						}
					],
					"end": "(?<!\\G|\\])(?=[{)\\n])"
				}
			]
		},
		"keywords": {
			"patterns": [
				{
					"name": "keyword.other",
					"match": "(?<![-_])\\b(manifest|includable-file|drop-perms|import|as|const|var|globalvar|assign|Mapping|treedata|concat|self|pnamespace|new|struct)\\b(?![-_])"
				},
				{
					"name": "keyword.control.inox",
					"match": "(?<![-_])\\b(if|else|switch|match|defaultcase|for|walk|in|return|yield|break|continue|prune|go|do|lifetimejob|assert|comp|testsuite|testcase|on|received|preinit)\\b(?![-_])"
				},
				{
					"name": "keyword.operator.expression.inox",
					"match": "(?<![-_])\\b(and|or|not-in|keyof|urlof|match|not-match|substrof|is|is-not)\\b(?![-_])"
				},
				{
					"name": "storage.type",
					"match": "(?<![-_])\\b(fn)\\b(?![-_])"
				}
			]
		},
		"regexps": {
			"patterns": [
				{
					"name": "string.regexp.inox",
					"begin": "%`",
					"end": "`",
					"patterns": [
						{
							"include": "#regexp"
						}
					]
				}
			]
		},
		"unprefixed-regexps": {
			"patterns": [
				{
					"name": "string.regexp.inox",
					"begin": "`",
					"end": "`",
					"patterns": [
						{
							"include": "#regexp"
						}
					]
				}
			]
		},
		"regexp": {
			"patterns": [
				{
					"name": "keyword.control.anchor.regexp",
					"match": "\\\\[bB]|\\^|\\$"
				},
				{
					"match": "\\\\[1-9]\\d*|\\\\k<([a-zA-Z_$][\\w$]*)>",
					"captures": {
						"0": {
							"name": "keyword.other.back-reference.regexp"
						},
						"1": {
							"name": "variable.other.regexp"
						}
					}
				},
				{
					"name": "keyword.operator.quantifier.regexp",
					"match": "[?+*]|\\{(\\d+,\\d+|\\d+,|,\\d+|\\d+)\\}\\??"
				},
				{
					"name": "keyword.operator.or.regexp",
					"match": "\\|"
				},
				{
					"name": "meta.group.assertion.regexp",
					"begin": "(\\()((\\?=)|(\\?!)|(\\?<=)|(\\?<!))",
					"beginCaptures": {
						"1": {
							"name": "punctuation.definition.group.regexp"
						},
						"2": {
							"name": "punctuation.definition.group.assertion.regexp"
						},
						"3": {
							"name": "meta.assertion.look-ahead.regexp"
						},
						"4": {
							"name": "meta.assertion.negative-look-ahead.regexp"
						},
						"5": {
							"name": "meta.assertion.look-behind.regexp"
						},
						"6": {
							"name": "meta.assertion.negative-look-behind.regexp"
						}
					},
					"end": "(\\))",
					"endCaptures": {
						"1": {
							"name": "punctuation.definition.group.regexp"
						}
					},
					"patterns": [
						{
							"include": "#regexp"
						}
					]
				},
				{
					"name": "meta.group.regexp",
					"begin": "\\((?:(\\?:)|(?:\\?<([a-zA-Z_$][\\w$]*)>))?",
					"beginCaptures": {
						"0": {
							"name": "punctuation.definition.group.regexp"
						},
						"1": {
							"name": "punctuation.definition.group.no-capture.regexp"
						},
						"2": {
							"name": "variable.other.regexp"
						}
					},
					"end": "\\)",
					"endCaptures": {
						"0": {
							"name": "punctuation.definition.group.regexp"
						}
					},
					"patterns": [
						{
							"include": "#regexp"
						}
					]
				},
				{
					"name": "constant.other.character-class.set.regexp",
					"begin": "(\\[)(\\^)?",
					"beginCaptures": {
						"1": {
							"name": "punctuation.definition.character-class.regexp"
						},
						"2": {
							"name": "keyword.operator.negation.regexp"
						}
					},
					"end": "(\\])",
					"endCaptures": {
						"1": {
							"name": "punctuation.definition.character-class.regexp"
						}
					},
					"patterns": [
						{
							"name": "constant.other.character-class.range.regexp",
							"match": "(?:.|(\\\\(?:[0-7]{3}|x[0-9A-Fa-f]{2}|u[0-9A-Fa-f]{4}))|(\\\\c[A-Z])|(\\\\.))\\-(?:[^\\]\\\\]|(\\\\(?:[0-7]{3}|x[0-9A-Fa-f]{2}|u[0-9A-Fa-f]{4}))|(\\\\c[A-Z])|(\\\\.))",
							"captures": {
								"1": {
									"name": "constant.character.numeric.regexp"
								},
								"2": {
									"name": "constant.character.control.regexp"
								},
								"3": {
									"name": "constant.character.escape.backslash.regexp"
								},
								"4": {
									"name": "constant.character.numeric.regexp"
								},
								"5": {
									"name": "constant.character.control.regexp"
								},
								"6": {
									"name": "constant.character.escape.backslash.regexp"
								}
							}
						},
						{
							"include": "#regex-character-class"
						}
					]
				},
				{
					"include": "#regex-character-class"
				}
			]
		},
		"regex-character-class": {
			"patterns": [
				{
					"name": "constant.other.character-class.regexp",
					"match": "\\\\[wWsSdDtrnvf]|\\."
				},
				{
					"name": "constant.character.numeric.regexp",
					"match": "\\\\([0-7]{3}|x[0-9A-Fa-f]{2}|u[0-9A-Fa-f]{4})"
				},
				{
					"name": "constant.character.control.regexp",
					"match": "\\\\c[A-Z]"
				},
				{
					"name": "constant.character.escape.backslash.regexp",
					"match": "\\\\."
				}
			]
		},
		"strings": {
			"patterns": [
				{
					"begin": "\"",
					"beginCaptures": {
						"0": {
							"name": "punctuation.definition.string.begin.inox"
						}
					},
					"end": "\"",
					"endCaptures": {
						"0": {
							"name": "punctuation.definition.string.end.inox"
						}
					},
					"name": "string.quoted.double.inox",
					"patterns": [
						{
							"include": "#stringcontent"
						}
					]
				},
				{
					"match": "[a-zA-Z_]+(\\.[a-zA-Z0-9_-]+)+(\\\\:|[+@~^]|/(?![>]))(\\\\:|[a-zA-Z0-9_+@.~^-]|/(?![>]))*",
					"name": "string.unquoted.inox"
				},
				{
					"match": "([+-]+|[a-zA-Z_][a-zA-Z0-9_-]*)(\\\\:|[+@~^]|/(?![>]))(\\\\:|[a-zA-Z0-9_+@./~^-]|/(?![>]))*",
					"name": "string.unquoted.inox"
				},
				{
					"match": "-{3,}[a-zA-Z0-9_+@./~^-](?![>])",
					"name": "string.unquoted.inox"
				},
				{
					"match": "-{1,2}(?!\\s*[a-zA-Z0-9_$(])",
					"name": "string.unquoted.inox"
				}
			]
		},
		"stringcontent": {
			"patterns": [
				{
					"match": "(?x)                # turn on extended mode\n  \\\\                # a literal backslash\n  (?:               # ...followed by...\n    [\"\\\\/bfnrt]     # one of these characters\n    |               # ...or...\n    u               # a u\n    [0-9a-fA-F]{4}) # and four hex digits",
					"name": "constant.character.escape.json"
				},
				{
					"match": "\\\\.",
					"name": "invalid.illegal.unrecognized-string-escape.inox"
				}
			]
		},
		"template-literals": {
			"name": "string.interpolated.template.inox",
			"begin": "`",
			"beginCaptures": {
				"0": {
					"name": "punctuation.definition.string.begin.inox"
				}
			},
			"end": "`",
			"endCaptures": {
				"0": {
					"name": "punctuation.definition.string.end.inox"
				}
			},
			"patterns": [
				{
					"match": "\\\\.",
					"name": "string.unquoted.string-slice"
				},
				{
					"begin": "\\$\\{",
					"beginCaptures": {
						"0": {
							"name": "punctuation.definition.template-expression.begin"
						}
					},
					"patterns": [
						{
							"include": "$self"
						}
					],
					"end": "\\}",
					"endCaptures": {
						"0": {
							"name": "punctuation.definition.template-expression.end"
						}
					}
				}
			]
		},
		"runes": {
			"patterns": [
				{
					"begin": "'",
					"beginCaptures": {
						"0": {
							"name": "punctuation.definition.string.begin"
						}
					},
					"end": "'",
					"endCaptures": {
						"0": {
							"name": "punctuation.definition.string.end"
						}
					},
					"name": "string.quoted.rune",
					"patterns": [
						{
							"match": "\\G(\\\\([0-7]{3}|[abfnrtv\\\\'\"])|.)(?=')",
							"name": "constant.other.rune.go"
						},
						{
							"match": "[^']+",
							"name": "invalid.illegal.unknown-rune"
						}
					]
				}
			]
		},
		"option-names": {
			"patterns": [
				{
					"match": "--[a-zA-Z_-]+\\b",
					"name": "string.unquoted"
				},
				{
					"match": "-[a-zA-Z_-]+\\b(?!\\s*[a-zA-Z0-9_$(])",
					"name": "string.unquoted"
				}
			]
		},
		"lists": {
			"begin": "\\[",
			"beginCaptures": {
				"0": {
					"name": "punctuation.begin.bracket"
				}
			},
			"end": "\\]",
			"endCaptures": {
				"0": {
					"name": "punctuation.end.bracket"
				}
			},
			"patterns": [
				{
					"include": "$self"
				}
			]
		},
		"objects-blocks": {
			"begin": "\\{",
			"beginCaptures": {
				"0": {
					"name": "punctuation.begin.bracket.curly"
				}
			},
			"end": "\\}",
			"endCaptures": {
				"0": {
					"name": "punctuation.end.bracket.curly"
				}
			},
			"patterns": [
				{
					"include": "$self"
				}
			]
		},
		"meta-call-expressions": {
			"patterns": [
				{
					"comment": "parenthesized call",
					"begin": "(?:(@[a-zA-Z_][a-zA-Z0-9_.-]*)!?)(\\()",
					"beginCaptures": {
						"1": {
							"patterns": [
								{
									"include": "#meta-member-expressions"
								},
								{
									"include": "#meta-identifiers"
								}
							]
						},
						"2": {
							"name": "punctuation.definition.begin.bracket.round"
						}
					},
					"patterns": [
						{
							"include": "$self"
						}
					],
					"end": "\\)",
					"endCaptures": {
						"0": {
							"name": "punctuation.definition.end.bracket.round"
						}
					}
				},
				{
					"comment": "shorthand syntax for calls with a single string argument",
					"begin": "(@[a-zA-Z_][a-zA-Z0-9_.-]*)(?=\")",
					"beginCaptures": {
						"1": {
							"patterns": [
								{
									"include": "#meta-member-expressions"
								},
								{
									"include": "#meta-identifiers"
								}
							]
						}
					},
					"patterns": [
						{
							"include": "#strings"
						}
					],
					"end": "(?<=\")",
					"endCaptures": {}
				},
				{
					"comment": "shorthand syntax for calls with a single object argument",
					"begin": "(@[a-zA-Z_][a-zA-Z0-9_.-]*)(\\{)",
					"beginCaptures": {
						"1": {
							"patterns": [
								{
									"include": "#meta-member-expressions"
								},
								{
									"include": "#meta-identifiers"
								}
							]
						}
					},
					"patterns": [
						{
							"include": "$self"
						}
					],
					"end": "\\}"
				}
			]
		},
		"function-call-expressions": {
			"patterns": [
				{
					"comment": "parenthesized call",
					"begin": "\\b([a-zA-Z_][a-zA-Z0-9_-]*!?)(\\()",
					"beginCaptures": {
						"1": {
							"name": "entity.name.function"
						},
						"2": {
							"name": "punctuation.definition.begin.bracket.round"
						}
					},
					"patterns": [
						{
							"include": "$self"
						}
					],
					"end": "\\)",
					"endCaptures": {
						"0": {
							"name": "punctuation.definition.end.bracket.round"
						}
					}
				},
				{
					"comment": "shorthand syntax for calls with a single string argument",
					"begin": "\\b([a-zA-Z][a-zA-Z0-9_-]*)(?=\")",
					"beginCaptures": {
						"1": {
							"name": "entity.name.type"
						}
					},
					"patterns": [
						{
							"include": "#strings"
						}
					],
					"end": "(?<=\")",
					"endCaptures": {}
				},
				{
					"comment": "shorthand syntax for calls with a single object argument",
					"begin": "\\b([a-zA-Z][a-zA-Z0-9_-]*)(\\{)",
					"beginCaptures": {
						"1": {
							"name": "entity.name.function"
						}
					},
					"patterns": [
						{
							"include": "$self"
						}
					],
					"end": "\\}"
				}
			]
		},
		"function-calls": {
			"patterns": [
				{
					"include": "#function-call-expressions"
				},
				{
					"comment": "command-like call: callee is an identifier",
					"begin": "(?:^|\\|)[ \t]*([a-zA-Z_][a-zA-Z0-9_-]*)(;|[ \t]+(?![-+*/]?[=]|\\s|#|\\?))",
					"beginCaptures": {
						"1": {
							"patterns": [
								{
									"match": "^ex\\b",
									"name": "constant.language"
								},
								{
									"include": "#keywords"
								},
								{
									"name": "entity.name.function",
									"match": ".*"
								}
							]
						}
					},
					"patterns": [
						{
							"include": "$self"
						}
					],
					"end": "\n"
				},
				{
					"comment": "command-like call: callee is an identifier member",
					"begin": "(?:^|\\|)[ \t]*([a-zA-Z0-9_.-]+\\.)([a-zA-Z][a-zA-Z0-9_-]*)(;|[ \t]+(?![-+*/]?[=]|#|\\?))",
					"beginCaptures": {
						"1": {
							"patterns": [
								{
									"include": "#keywords"
								},
								{
									"include": "#identifiers"
								}
							]
						},
						"2": {
							"name": "entity.name.function"
						}
					},
					"patterns": [
						{
							"include": "$self"
						}
					],
					"end": "\n"
				}
			]
		},
		"css-classes": {
			"captures": {
				"0": {
					"name": "punctuation.definition.entity.css"
				}
			},
			"match": "\\.[a-zA-Z0-9_-]+",
			"name": "entity.other.attribute-name.class.css"
		},
		"css-pseudo-classes": {
			"captures": {
				"0": {
					"name": "punctuation.definition.entity.css"
				}
			},
			"match": ":[a-zA-Z0-9_-]+",
			"name": "entity.other.attribute-name.pseudo-class.css"
		},
		"css-pseudo-elements": {
			"captures": {
				"0": {
					"name": "punctuation.definition.entity.css"
				}
			},
			"match": "::[a-zA-Z0-9_-]+",
			"name": "entity.other.attribute-name.pseudo-element.css"
		},
		"css-type-selectors": {
			"patterns": [
				{
					"match": "\\*",
					"name": "entity.name.tag.wildcard.css"
				},
				{
					"match": "[a-zA-Z0-9_-]+",
					"name": "entity.name.tag.wildcard.css"
				}
			]
		},
		"css-id-selectors": {
			"patterns": [
				{
					"match": "#[a-zA-Z0-9_-]+",
					"name": "entity.other.attribute-name.id.css"
				}
			]
		},
		"css-attribute-selectors": {
			"begin": "(\\[)([a-zA-Z0-9_-]+)=",
			"beginCaptures": {
				"1": {
					"name": "punctuation.definition.entity.begin.bracket.square.css"
				},
				"2": {
					"name": "entity.other.attribute-name.css"
				}
			},
			"patterns": [
				{
					"include": "#strings"
				}
			],
			"end": "\\]",
			"endCaptures": {
				"0": {
					"name": "punctuation.definition.entity.end.bracket.square.css"
				}
			},
			"name": "meta.attribute-selector.css"
		},
		"css-selectors": {
			"begin": "s!",
			"beginCaptures": {
				"0": {
					"name": "string"
				}
			},
			"end": "(!|\n)",
			"endCaptures": {
				"0": {
					"name": "string"
				}
			},
			"patterns": [
				{
					"include": "#css-pseudo-elements"
				},
				{
					"include": "#css-classes"
				},
				{
					"include": "#css-pseudo-classes"
				},
				{
					"include": "#css-type-selectors"
				},
				{
					"include": "#css-id-selectors"
				},
				{
					"include": "#css-attribute-selectors"
				}
			]
		},
		"quoted-statements": {
			"begin": "@\\{",
			"end": "\\}",
			"beginCaptures": {
				"0": {
					"name": "punctuation.begin.bracket.curly.inox"
				}
			},
			"endCaptures": {
				"0": {
					"name": "punctuation.end.bracket.curly.inox"
				}
			},
			"patterns": [
				{
					"include": "$self"
				}
			]
		},
		"unquoted-region": {
			"begin": "<\\{",
			"beginCaptures": {
				"0": {
					"name": "punctuation.definition.template-expression.begin"
				}
			},
			"end": "\\}>",
			"endCaptures": {
				"0": {
					"name": "punctuation.definition.template-expression.end"
				}
			},
			"patterns": [
				{
					"include": "#expressions-and-comments"
				}
			]
		},
		"complex-string-patterns": {
			"patterns": [
				{
					"begin": "(?<!\\w)(%str)([(])",
					"beginCaptures": {
						"1": {
							"name": "entity.name.type"
						},
						"2": {
							"name": "punctuation.begin.bracket.inox"
						}
					},
					"patterns": [
						{
							"include": "#complex-string-pattern-content"
						}
					],
					"end": "[)]",
					"endCaptures": {
						"0": {
							"name": "punctuation.end.bracket.inox"
						}
					}
				}
			]
		},
		"unprefixed-string-patterns": {
			"patterns": [
				{
					"begin": "(?<!\\w)(str)([(])",
					"beginCaptures": {
						"1": {
							"name": "entity.name.type"
						},
						"2": {
							"name": "punctuation.begin.bracket.inox"
						}
					},
					"patterns": [
						{
							"include": "#complex-string-pattern-content"
						}
					],
					"end": "[)]",
					"endCaptures": {
						"0": {
							"name": "punctuation.end.bracket.inox"
						}
					}
				}
			]
		},
		"complex-string-pattern-content": {
			"patterns": [
				{
					"begin": "\\(",
					"patterns": [
						{
							"include": "#complex-string-pattern-content"
						}
					],
					"end": "\\)"
				},
				{
					"match": "[a-zA-Z_][a-zA-Z0-9_-]*:",
					"comment": "group name"
				},
				{
					"comment": "named pattern",
					"match": "[a-zA-Z_][a-zA-Z0-9_-]*",
					"name": "entity.name.type.inox"
				},
				{
					"include": "#strings"
				},
				{
					"include": "#runes"
				},
				{
					"include": "#numbers"
				},
				{
					"include": "#regexps"
				}
			]
		},
		"named-patterns": {
			"patterns": [
				{
					"name": "entity.name.type",
					"match": "(?<!\\w)%[a-zA-Z_][a-zA-Z0-9_-]*\\b"
				}
			]
		},
		"meta-member-expressions": {
			"begin": "(@[a-zA-Z_][a-zA-Z0-9_-]*)(?=\\.)",
			"captures": {
				"1": {
					"name": "variable.other.constant"
				}
			},
			"patterns": [
				{
					"name": "variable.other.constant",
					"match": "[a-zA-Z_][a-zA-Z0-9_-]*"
				}
			],
			"end": "(\\n|(?<=\\.[a-zA-Z_][a-zA-Z0-9_-]*)(?=^|[^.]))"
		},
		"meta-identifiers": {
			"patterns": [
				{
					"name": "variable.other.constant",
					"match": "@[a-zA-Z_][a-zA-Z0-9_-]*\\b"
				}
			]
		},
		"identifiers": {
			"patterns": [
				{
					"name": "constant.character",
					"match": "#[a-zA-Z_][a-zA-Z0-9_-]*\\b"
				},
				{
					"name": "variable.other",
					"match": "[A-Z_][A-Z0-9_-]*-[a-zA-Z0-9_-]+\\b"
				},
				{
					"name": "variable.other.constant",
					"match": "[A-Z_][A-Z0-9_-]*\\b"
				},
				{
					"name": "variable.other",
					"match": "[a-zA-Z_][a-zA-Z0-9_-]*\\b"
				}
			]
		},
		"xml-expression": {
			"patterns": [
				{
					"comment": "explicit namespace",
					"begin": "([a-zA-Z][a-zA-Z0-9]*)(?=<[a-zA-Z].*)",
					"beginCaptures": {
						"1": {
							"name": "variable.other"
						}
					},
					"patterns": [
						{
							"include": "#xml-expression-inner"
						}
					],
					"end": "(?<=(/>)|(</)([a-zA-Z_][a-zA-Z0-9_-]*)[ \t]*(>)?)"
				},
				{
					"comment": "implicit namespace",
					"begin": "(?<=(^\\s*|[:,;}\\]()]\\s*|(if|else|switch|match|for|walk|in|return|yield|assert|comp|on|received|and|or|not-in|keyof|urlof|match|not-match|substrof|is|is-not)\\s+))(?=<[a-zA-Z][a-zA-Z_-]*[ >{/])",
					"patterns": [
						{
							"include": "#xml-expression-inner"
						}
					],
					"end": "(?<=(/>)|(</)([a-zA-Z_][a-zA-Z0-9_-]*)[ \t]*(>)?)"
				},
				{
					"comment": "implicit namespace, single line",
					"begin": "(?=<[a-zA-Z][a-zA-Z_-]*(\\s+[a-zA-Z]|\\s*[<>/]))",
					"patterns": [
						{
							"include": "#xml-expression-inner"
						}
					],
					"end": "(?<=(/>)|(</)([a-zA-Z_][a-zA-Z0-9_-]*)[ \t]*(>)?)"
				},
				{
					"comment": "implicit namespace, single line, hyperscript (best try)",
					"begin": "(?=<[a-zA-Z][a-zA-Z_-]*\\s+[{]\\s*([}]|on|def|worker|eventsource|socket|init|behavior|install|require))",
					"patterns": [
						{
							"include": "#xml-expression-inner"
						}
					],
					"end": "(?<=(/>)|(</)([a-zA-Z_][a-zA-Z0-9_-]*)[ \t]*(>)?)"
				}
			]
		},
		"xml-expression-inner": {
			"patterns": [
				{
					"begin": "(?=<style)",
					"end": "((?<=[<]/style>[\\s|\\n]*)|(?!(<)\\s*(?:([_$[:alpha:]][-_$[:alnum:].]*)(?<!\\.|-)(:))?((?:[a-z][a-z0-9]*|([_$[:alpha:]][-_$[:alnum:].]*))(?<!\\.|-))?\\s*(>)))",
					"patterns": [
						{
							"include": "#style-tag"
						}
					]
				},
				{
					"include": "#top-xml-tag-without-attributes-in-expression"
				},
				{
					"include": "#top-xml-tag-in-expression"
				}
			]
		},
		"top-xml-tag-without-attributes-in-expression": {
			"begin": "(?=(<)\\s*(?:([_$[:alpha:]][-_$[:alnum:].]*)(?<!\\.|-)(:))?((?:[a-z][a-z0-9]*|([_$[:alpha:]][-_$[:alnum:].]*))(?<!\\.|-))?\\s*(>))",
			"end": "(?!(<)\\s*(?:([_$[:alpha:]][-_$[:alnum:].]*)(?<!\\.|-)(:))?((?:[a-z][a-z0-9]*|([_$[:alpha:]][-_$[:alnum:].]*))(?<!\\.|-))?\\s*(>))",
			"patterns": [
				{
					"include": "#xml-tag-without-attributes"
				}
			]
		},
		"top-xml-tag-in-expression": {
			"begin": "(?=(<)\\s*(?:([_$[:alpha:]][-_$[:alnum:].]*)(?<!\\.|-)(:))?((?:[a-z][a-z0-9]*|([_$[:alpha:]][-_$[:alnum:].]*))(?<!\\.|-))(?=((<\\s*)|(\\s+))(?!\\?)|\\/?>))",
			"end": "(?!(<)\\s*(?:([_$[:alpha:]][-_$[:alnum:].]*)(?<!\\.|-)(:))?((?:[a-z][a-z0-9]*|([_$[:alpha:]][-_$[:alnum:].]*))(?<!\\.|-))(?=((<\\s*)|(\\s+))(?!\\?)|\\/?>))",
			"patterns": [
				{
					"include": "#xml-tag"
				}
			]
		},
		"xml-tag-without-attributes-in-expression": {
			"begin": "(?<!\\+\\+|--)(?<=[({\\[,?=>:*]|&&|\\|\\||\\?|\\*\\/|^await|[^\\._$[:alnum:]]await|^return|[^\\._$[:alnum:]]return|^default|[^\\._$[:alnum:]]default|^yield|[^\\._$[:alnum:]]yield|^)\\s*(?=(<)\\s*(?:([_$[:alpha:]][-_$[:alnum:].]*)(?<!\\.|-)(:))?((?:[a-z][a-z0-9]*|([_$[:alpha:]][-_$[:alnum:].]*))(?<!\\.|-))?\\s*(>))",
			"end": "(?!(<)\\s*(?:([_$[:alpha:]][-_$[:alnum:].]*)(?<!\\.|-)(:))?((?:[a-z][a-z0-9]*|([_$[:alpha:]][-_$[:alnum:].]*))(?<!\\.|-))?\\s*(>))",
			"patterns": [
				{
					"include": "#xml-tag-without-attributes"
				}
			]
		},
		"js-script-tag-expression": {
			"begin": "([a-zA-Z][a-zA-Z0-9]*)?(?=<[a-zA-Z].*)(?=<script\\b(?!-|.*type=\"text/hyperscript\"|.*\\bh\\b(?!-)))",
			"beginCaptures": {
				"1": {
					"name": "variable.other"
				}
			},
			"end": "(?!\\G)([ \\t]*$\\n?)?",
			"endCaptures": {
				"1": {
					"name": "punctuation.whitespace.embedded.trailing.inox"
				}
			},
			"patterns": [
				{
					"include": "#js-script-tag-inner"
				}
			]
		},
		"js-script-tag": {
			"begin": "(^[ \\t]+)?(?=<script\\b(?!-|.*type=\"text/hyperscript\"|.*\\bh\\b(?!-)))",
			"beginCaptures": {
				"1": {
					"name": "punctuation.whitespace.embedded.leading.inox"
				}
			},
			"end": "(?!\\G)([ \\t]*$\\n?)?",
			"endCaptures": {
				"1": {
					"name": "punctuation.whitespace.embedded.trailing.inox"
				}
			},
			"patterns": [
				{
					"include": "#js-script-tag-inner"
				}
			]
		},
		"js-script-tag-inner": {
			"begin": "(<)(script)\\b",
			"beginCaptures": {
				"0": {
					"name": "meta.tag.metadata.script.start.inox"
				},
				"1": {
					"name": "punctuation.definition.tag.begin.inox"
				},
				"2": {
					"name": "entity.name.tag.inox"
				}
			},
			"end": "(/)(script)(>)",
			"endCaptures": {
				"0": {
					"name": "meta.tag.metadata.script.end.inox"
				},
				"1": {
					"name": "punctuation.definition.tag.begin.inox"
				},
				"2": {
					"name": "entity.name.tag.inox"
				},
				"3": {
					"name": "punctuation.definition.tag.end.inox"
				}
			},
			"name": "meta.embedded.block.js",
			"patterns": [
				{
					"begin": "\\G",
					"end": "(?=/)",
					"patterns": [
						{
							"include": "#xml-tag-attributes"
						},
						{
							"begin": "(>)",
							"beginCaptures": {
								"0": {
									"name": "meta.tag.metadata.script.start.inox"
								},
								"1": {
									"name": "punctuation.definition.tag.end.inox"
								}
							},
							"end": "((<))(?=/script)",
							"endCaptures": {
								"0": {
									"name": "meta.tag.metadata.script.end.inox"
								},
								"1": {
									"name": "punctuation.definition.tag.begin.inox"
								},
								"2": {
									"name": "source.js-ignored-vscode"
								}
							},
							"patterns": [
								{
									"begin": "\\G",
									"end": "(?=</script)",
									"name": "source.js",
									"patterns": [
										{
											"begin": "(^[ \\t]+)?(?=//)",
											"beginCaptures": {
												"1": {
													"name": "punctuation.whitespace.comment.leading.js"
												}
											},
											"end": "(?!\\G)",
											"patterns": [
												{
													"begin": "//",
													"beginCaptures": {
														"0": {
															"name": "punctuation.definition.comment.js"
														}
													},
													"end": "(?=</script)|\\n",
													"name": "comment.line.double-slash.js"
												}
											]
										},
										{
											"begin": "/\\*",
											"captures": {
												"0": {
													"name": "punctuation.definition.comment.js"
												}
											},
											"end": "\\*/|(?=</script)",
											"name": "comment.block.js"
										},
										{
											"include": "source.js"
										}
									]
								}
							]
						},
						{
							"begin": "\\G",
							"end": "(?ix:\n\t\t\t\t\t\t\t\t\t\t\t\t(?=>\t\t\t\t\t\t\t\t\t\t\t# Tag without type attribute\n\t\t\t\t\t\t\t\t\t\t\t\t  | type(?=[\\s=])\n\t\t\t\t\t\t\t\t\t\t\t\t  \t(?!\\s*=\\s*\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t''\t\t\t\t\t\t\t\t# Empty\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t  | \"\"\t\t\t\t\t\t\t\t\t#   Values\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t  | ('|\"|)\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\ttext/\t\t\t\t\t\t\t# Text mime-types\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tjavascript(1\\.[0-5])?\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t  | x-javascript\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t  | jscript\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t  | livescript\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t  | (x-)?ecmascript\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t  | babel\t\t\t\t\t\t# Javascript variant currently\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t  \t\t\t\t\t\t\t\t#   recognized as such\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t  \t)\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t  | application/\t\t\t\t\t# Application mime-types\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t  \t(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(x-)?javascript\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t  | (x-)?ecmascript\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t  | module\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t  \t)\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t[\\s\"'>]\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t\t\t\t\t)",
							"name": "meta.tag.metadata.script.start.inox",
							"patterns": [
								{
									"include": "#attribute"
								}
							]
						},
						{
							"begin": "(?ix:\n\t\t\t\t\t\t\t\t\t\t\t\t(?=\n\t\t\t\t\t\t\t\t\t\t\t\t\ttype\\s*=\\s*\n\t\t\t\t\t\t\t\t\t\t\t\t\t('|\"|)\n\t\t\t\t\t\t\t\t\t\t\t\t\ttext/\n\t\t\t\t\t\t\t\t\t\t\t\t\t(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tx-handlebars\n\t\t\t\t\t\t\t\t\t\t\t\t\t  | (x-(handlebars-)?|ng-)?template\n\t\t\t\t\t\t\t\t\t\t\t\t\t  | html\n\t\t\t\t\t\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t\t\t\t\t\t\t[\\s\"'>]\n\t\t\t\t\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t\t\t\t\t)",
							"end": "((<))(?=/script)",
							"endCaptures": {
								"0": {
									"name": "meta.tag.metadata.script.end.inox"
								},
								"1": {
									"name": "punctuation.definition.tag.begin.inox"
								},
								"2": {
									"name": "text.inox.basic"
								}
							},
							"patterns": [
								{
									"begin": "\\G",
									"end": "(>)",
									"endCaptures": {
										"1": {
											"name": "punctuation.definition.tag.end.inox"
										}
									},
									"name": "meta.tag.metadata.script.start.inox",
									"patterns": [
										{
											"include": "#attribute"
										}
									]
								},
								{
									"begin": "(?!\\G)",
									"end": "(?=</script)",
									"name": "text.inox.basic",
									"patterns": [
										{
											"include": "text.inox.basic"
										}
									]
								}
							]
						},
						{
							"begin": "(?=type)",
							"end": "(<)(?=/script)",
							"endCaptures": {
								"0": {
									"name": "meta.tag.metadata.script.end.inox"
								},
								"1": {
									"name": "punctuation.definition.tag.begin.inox"
								}
							},
							"patterns": [
								{
									"begin": "\\G",
									"end": "(>)",
									"endCaptures": {
										"1": {
											"name": "punctuation.definition.tag.end.inox"
										}
									},
									"name": "meta.tag.metadata.script.start.inox",
									"patterns": [
										{
											"include": "#xml-tag-attributes"
										}
									]
								},
								{
									"begin": "(?!\\G)",
									"end": "(?=</script)",
									"name": "source.unknown"
								}
							]
						}
					]
				}
			]
		},
		"hs-script-tag-expression": {
			"begin": "([a-zA-Z][a-zA-Z0-9]*)?(?=<[a-zA-Z].*)(?=<script\\b(?!-)(?=.*type=\"text/hyperscript\"|.*\\bh\\b(?!-)))",
			"beginCaptures": {
				"1": {
					"name": "variable.other"
				}
			},
			"end": "(?!\\G)([ \\t]*$\\n?)?",
			"endCaptures": {
				"1": {
					"name": "punctuation.whitespace.embedded.trailing.inox"
				}
			},
			"patterns": [
				{
					"include": "#hs-script-tag-inner"
				}
			]
		},
		"hs-script-tag": {
			"begin": "(^[ \\t]+)?(?=<script\\b(?!-)(?=.*type=\"text/hyperscript\"|.*\\bh\\b(?!-)))",
			"beginCaptures": {
				"1": {
					"name": "punctuation.whitespace.embedded.leading.inox"
				}
			},
			"end": "(?!\\G)([ \\t]*$\\n?)?",
			"endCaptures": {
				"1": {
					"name": "punctuation.whitespace.embedded.trailing.inox"
				}
			},
			"patterns": [
				{
					"include": "#hs-script-tag-inner"
				}
			]
		},
		"hs-script-tag-inner": {
			"begin": "(<)(script)\\b",
			"beginCaptures": {
				"0": {
					"name": "meta.tag.metadata.script.start.inox"
				},
				"1": {
					"name": "punctuation.definition.tag.begin.inox"
				},
				"2": {
					"name": "entity.name.tag.inox"
				}
			},
			"end": "(/)(script)(>)",
			"endCaptures": {
				"0": {
					"name": "meta.tag.metadata.script.end.inox"
				},
				"1": {
					"name": "punctuation.definition.tag.begin.inox"
				},
				"2": {
					"name": "entity.name.tag.inox"
				},
				"3": {
					"name": "punctuation.definition.tag.end.inox"
				}
			},
			"name": "meta.embedded.block._hyperscript-inox",
			"patterns": [
				{
					"begin": "\\G",
					"end": "(?=/)",
					"patterns": [
						{
							"include": "#xml-tag-attributes"
						},
						{
							"begin": "(>)",
							"beginCaptures": {
								"0": {
									"name": "meta.tag.metadata.script.start.inox"
								},
								"1": {
									"name": "punctuation.definition.tag.end.inox"
								}
							},
							"end": "((<))(?=/script)",
							"endCaptures": {
								"0": {
									"name": "meta.tag.metadata.script.end.inox"
								},
								"1": {
									"name": "punctuation.definition.tag.begin.inox"
								},
								"2": {
									"name": "source.js-ignored-vscode"
								}
							},
							"patterns": [
								{
									"begin": "\\G",
									"end": "(?=</script)",
									"name": "source._hyperscript-inox",
									"patterns": [
										{
											"begin": "(^[ \\t]+)?(?=//)",
											"beginCaptures": {
												"1": {
													"name": "punctuation.whitespace.comment.leading.js"
												}
											},
											"end": "(?!\\G)",
											"patterns": [
												{
													"begin": "//",
													"beginCaptures": {
														"0": {
															"name": "punctuation.definition.comment.js"
														}
													},
													"end": "(?=</script)|\\n",
													"name": "comment.line.double-slash.js"
												}
											]
										},
										{
											"begin": "/\\*",
											"captures": {
												"0": {
													"name": "punctuation.definition.comment.js"
												}
											},
											"end": "\\*/|(?=</script)",
											"name": "comment.block.js"
										},
										{
											"include": "source._hyperscript-inox"
										}
									]
								}
							]
						},
						{
							"begin": "\\G",
							"end": "(?ix:\n\t\t\t\t\t\t\t\t\t\t\t\t(?=>\t\t\t\t\t\t\t\t\t\t\t# Tag without type attribute\n\t\t\t\t\t\t\t\t\t\t\t\t  | type(?=[\\s=])\n\t\t\t\t\t\t\t\t\t\t\t\t  \t(?!\\s*=\\s*\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t''\t\t\t\t\t\t\t\t# Empty\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t  | \"\"\t\t\t\t\t\t\t\t\t#   Values\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t  | ('|\"|)\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\ttext/\t\t\t\t\t\t\t# Text mime-types\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tjavascript(1\\.[0-5])?\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t  | x-javascript\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t  | jscript\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t  | livescript\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t  | (x-)?ecmascript\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t  | babel\t\t\t\t\t\t# Javascript variant currently\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t  \t\t\t\t\t\t\t\t#   recognized as such\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t  \t)\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t  | application/\t\t\t\t\t# Application mime-types\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t  \t(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(x-)?javascript\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t  | (x-)?ecmascript\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t  | module\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t  \t)\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t[\\s\"'>]\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t\t\t\t\t)",
							"name": "meta.tag.metadata.script.start.inox",
							"patterns": [
								{
									"include": "#attribute"
								}
							]
						},
						{
							"begin": "(?ix:\n\t\t\t\t\t\t\t\t\t\t\t\t(?=\n\t\t\t\t\t\t\t\t\t\t\t\t\ttype\\s*=\\s*\n\t\t\t\t\t\t\t\t\t\t\t\t\t('|\"|)\n\t\t\t\t\t\t\t\t\t\t\t\t\ttext/\n\t\t\t\t\t\t\t\t\t\t\t\t\t(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tx-handlebars\n\t\t\t\t\t\t\t\t\t\t\t\t\t  | (x-(handlebars-)?|ng-)?template\n\t\t\t\t\t\t\t\t\t\t\t\t\t  | html\n\t\t\t\t\t\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t\t\t\t\t\t\t[\\s\"'>]\n\t\t\t\t\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t\t\t\t\t)",
							"end": "((<))(?=/script)",
							"endCaptures": {
								"0": {
									"name": "meta.tag.metadata.script.end.inox"
								},
								"1": {
									"name": "punctuation.definition.tag.begin.inox"
								},
								"2": {
									"name": "text.inox.basic"
								}
							},
							"patterns": [
								{
									"begin": "\\G",
									"end": "(>)",
									"endCaptures": {
										"1": {
											"name": "punctuation.definition.tag.end.inox"
										}
									},
									"name": "meta.tag.metadata.script.start.inox",
									"patterns": [
										{
											"include": "#attribute"
										}
									]
								},
								{
									"begin": "(?!\\G)",
									"end": "(?=</script)",
									"name": "text.inox.basic",
									"patterns": [
										{
											"include": "text.inox.basic"
										}
									]
								}
							]
						},
						{
							"begin": "(?=type)",
							"end": "(<)(?=/script)",
							"endCaptures": {
								"0": {
									"name": "meta.tag.metadata.script.end.inox"
								},
								"1": {
									"name": "punctuation.definition.tag.begin.inox"
								}
							},
							"patterns": [
								{
									"begin": "\\G",
									"end": "(>)",
									"endCaptures": {
										"1": {
											"name": "punctuation.definition.tag.end.inox"
										}
									},
									"name": "meta.tag.metadata.script.start.inox",
									"patterns": [
										{
											"include": "#xml-tag-attributes"
										}
									]
								},
								{
									"begin": "(?!\\G)",
									"end": "(?=</script)",
									"name": "source.unknown"
								}
							]
						}
					]
				}
			]
		},
		"style-tag-expression": {
			"begin": "([a-zA-Z][a-zA-Z0-9]*)?(?=<[a-zA-Z].*)(?=<style\\b(?!-))",
			"beginCaptures": {
				"1": {
					"name": "variable.other"
				}
			},
			"end": "(?!\\G)([ \\t]*$\\n?)?",
			"endCaptures": {
				"1": {
					"name": "punctuation.whitespace.embedded.trailing.inox"
				}
			},
			"patterns": [
				{
					"include": "#style-tag-inner"
				}
			]
		},
		"style-tag": {
			"name": "meta.tag.style.inox",
			"begin": "(^[ \\t]+)?(?=<style\\b(?!-))",
			"beginCaptures": {
				"1": {
					"name": "punctuation.whitespace.embedded.leading.inox"
				}
			},
			"end": "(?!\\G)([ \\t]*$\\n?)?",
			"endCaptures": {
				"1": {
					"name": "punctuation.whitespace.embedded.trailing.inox"
				}
			},
			"patterns": [
				{
					"include": "#style-tag-inner"
				}
			]
		},
		"style-tag-inner": {
			"name": "meta.embedded.block.css",
			"begin": "(<)(style)(?=\\s|/?>)",
			"beginCaptures": {
				"0": {
					"name": "meta.tag.metadata.style.start.inox"
				},
				"1": {
					"name": "punctuation.definition.tag.begin.inox"
				},
				"2": {
					"name": "entity.name.tag.inox"
				}
			},
			"end": "((<)/)(style)\\s*(>)",
			"endCaptures": {
				"0": {
					"name": "meta.tag.metadata.style.end.inox"
				},
				"1": {
					"name": "punctuation.definition.tag.begin.inox"
				},
				"2": {
					"name": "source.css-ignored-vscode"
				},
				"3": {
					"name": "entity.name.tag.inox"
				},
				"4": {
					"name": "punctuation.definition.tag.end.inox"
				}
			},
			"patterns": [
				{
					"begin": "\\G",
					"captures": {
						"1": {
							"name": "punctuation.definition.tag.end.inox"
						}
					},
					"end": "(>)",
					"name": "meta.tag.metadata.style.start.inox",
					"patterns": [
						{
							"include": "#xml-tag-attributes"
						}
					]
				},
				{
					"begin": "(?!\\G)",
					"end": "(?=</style)",
					"name": "source.css",
					"patterns": [
						{
							"include": "source.css"
						}
					]
				}
			]
		},
		"xml-tag-without-attributes": {
			"name": "meta.tag.without-attributes.inox",
			"begin": "(<)\\s*(?:([_$[:alpha:]][-_$[:alnum:].]*)(?<!\\.|-)(:))?((?:[a-z][a-z0-9]*|([_$[:alpha:]][-_$[:alnum:].]*))(?<!\\.|-))?\\s*(>)",
			"end": "(</)\\s*(?:([_$[:alpha:]][-_$[:alnum:].]*)(?<!\\.|-)(:))?((?:[a-z][a-z0-9]*|([_$[:alpha:]][-_$[:alnum:].]*))(?<!\\.|-))?\\s*(>)",
			"beginCaptures": {
				"1": {
					"name": "punctuation.definition.tag.begin.inox"
				},
				"2": {
					"name": "entity.name.tag.namespace.inox"
				},
				"3": {
					"name": "punctuation.separator.namespace.inox"
				},
				"4": {
					"name": "entity.name.tag.inox"
				},
				"5": {
					"name": "support.class.component.inox"
				},
				"6": {
					"name": "punctuation.definition.tag.end.inox"
				}
			},
			"endCaptures": {
				"1": {
					"name": "punctuation.definition.tag.begin.inox"
				},
				"2": {
					"name": "entity.name.tag.namespace.inox"
				},
				"3": {
					"name": "punctuation.separator.namespace.inox"
				},
				"4": {
					"name": "entity.name.tag.inox"
				},
				"5": {
					"name": "support.class.component.inox"
				},
				"6": {
					"name": "punctuation.definition.tag.end.inox"
				}
			},
			"contentName": "meta.xml.children.inox",
			"patterns": [
				{
					"include": "#xml-children"
				}
			]
		},
		"xml-tag-in-expression": {
			"begin": "(?x)\n  (?<!\\+\\+|--)(?<=[({\\[,?=>:*]|&&|\\|\\||\\?|\\*\\/|^await|[^\\._$[:alnum:]]await|^return|[^\\._$[:alnum:]]return|^default|[^\\._$[:alnum:]]default|^yield|[^\\._$[:alnum:]]yield|^)\\s*\n  (?!<\\s*[_$[:alpha:]][_$[:alnum:]]*((\\s+extends\\s+[^=>])|,)) # look ahead is not type parameter of arrow\n  (?=(<)\\s*(?:([_$[:alpha:]][-_$[:alnum:].]*)(?<!\\.|-)(:))?((?:[a-z][a-z0-9]*|([_$[:alpha:]][-_$[:alnum:].]*))(?<!\\.|-))(?=((<\\s*)|(\\s+))(?!\\?)|\\/?>))",
			"end": "(?!(<)\\s*(?:([_$[:alpha:]][-_$[:alnum:].]*)(?<!\\.|-)(:))?((?:[a-z][a-z0-9]*|([_$[:alpha:]][-_$[:alnum:].]*))(?<!\\.|-))(?=((<\\s*)|(\\s+))(?!\\?)|\\/?>))",
			"patterns": [
				{
					"include": "#xml-tag"
				}
			]
		},
		"xml-tag": {
			"name": "meta.tag.inox",
			"begin": "(?=(<)\\s*(?:([_$[:alpha:]][-_$[:alnum:].]*)(?<!\\.|-)(:))?((?:[a-z][a-z0-9]*|([_$[:alpha:]][-_$[:alnum:].]*))(?<!\\.|-))(?=((<\\s*)|(\\s+))(?!\\?)|\\/?>))",
			"end": "(/>)|(?:(</)\\s*(?:([_$[:alpha:]][-_$[:alnum:].]*)(?<!\\.|-)(:))?((?:[a-z][a-z0-9]*|([_$[:alpha:]][-_$[:alnum:].]*))(?<!\\.|-))?\\s*(>))",
			"endCaptures": {
				"1": {
					"name": "punctuation.definition.tag.end.inox"
				},
				"2": {
					"name": "punctuation.definition.tag.begin.inox"
				},
				"3": {
					"name": "entity.name.tag.namespace.inox"
				},
				"4": {
					"name": "punctuation.separator.namespace.inox"
				},
				"5": {
					"name": "entity.name.tag.inox"
				},
				"6": {
					"name": "support.class.component.inox"
				},
				"7": {
					"name": "punctuation.definition.tag.end.inox"
				}
			},
			"patterns": [
				{
					"begin": "(<)\\s*(?:([_$[:alpha:]][-_$[:alnum:].]*)(?<!\\.|-)(:))?((?:[a-z][a-z0-9]*|([_$[:alpha:]][-_$[:alnum:].]*))(?<!\\.|-))(?=((<\\s*)|(\\s+))(?!\\?)|\\/?>)",
					"beginCaptures": {
						"1": {
							"name": "punctuation.definition.tag.begin.inox"
						},
						"2": {
							"name": "entity.name.tag.namespace.inox"
						},
						"3": {
							"name": "punctuation.separator.namespace.inox"
						},
						"4": {
							"name": "entity.name.tag.inox"
						},
						"5": {
							"name": "support.class.component.inox"
						}
					},
					"end": "(?=[/]?>)",
					"patterns": [
						{
							"include": "#type-arguments"
						},
						{
							"include": "#xml-tag-attributes"
						}
					]
				},
				{
					"begin": "(>)",
					"beginCaptures": {
						"1": {
							"name": "punctuation.definition.tag.end.inox"
						}
					},
					"end": "(?=</)",
					"contentName": "meta.xml.children.inox",
					"patterns": [
						{
							"include": "#xml-children"
						}
					]
				}
			]
		},
		"xml-children": {
			"patterns": [
				{
					"include": "#client-side-xml-interpolation"
				},
				{
					"include": "#style-tag"
				},
				{
					"include": "#hs-script-tag"
				},
				{
					"include": "#js-script-tag"
				},
				{
					"include": "#xml-tag-without-attributes"
				},
				{
					"include": "#xml-tag"
				},
				{
					"include": "#xml-evaluated-code"
				},
				{
					"include": "#xml-entities"
				}
			]
		},
		"xml-evaluated-code": {
			"contentName": "meta.embedded.expression.inox",
			"begin": "\\{",
			"end": "\\}",
			"beginCaptures": {
				"0": {
					"name": "punctuation.section.embedded.begin.inox"
				}
			},
			"endCaptures": {
				"0": {
					"name": "punctuation.section.embedded.end.inox"
				}
			},
			"patterns": [
				{
					"include": "$self"
				}
			]
		},
		"xml-entities": {
			"patterns": [
				{
					"name": "constant.character.entity.inox",
					"match": "(&)([a-zA-Z0-9]+|#[0-9]+|#x[0-9a-fA-F]+)(;)",
					"captures": {
						"1": {
							"name": "punctuation.definition.entity.inox"
						},
						"3": {
							"name": "punctuation.definition.entity.inox"
						}
					}
				}
			]
		},
		"xml-tag-attributes": {
			"name": "meta.tag.attributes.inox",
			"begin": "\\s+",
			"end": "(?=[/]?>)",
			"patterns": [
				{
					"include": "#hyperscript-block"
				},
				{
					"begin": "(?=<\\{)",
					"patterns": [
						{
							"include": "#unquoted-region"
						}
					],
					"end": "(?<=\\}>)(?=[=]?)"
				},
				{
					"include": "#xml-tag-attribute-name"
				},
				{
					"include": "#xml-tag-attribute-assignment"
				},
				{
					"include": "#xml-string-double-quoted"
				},
				{
					"include": "$self"
				},
				{
					"include": "#xml-tag-attributes-illegal"
				}
			]
		},
		"hyperscript-block": {
			"begin": "\\{",
			"name": "meta.embedded.block._hyperscript-inox",
			"patterns": [
				{
					"include": "source._hyperscript-inox"
				}
			],
			"end": "\\}(\\s*\\.)|(?=\\s*>)"
		},
		"xml-tag-attribute-name": {
			"match": "(?x)\n  \\s*\n  (?:([_$[:alpha:]][-_$[:alnum:].]*)(:))?\n  ([_$[:alpha:]][-_$[:alnum:]]*)\n  (?=\\s|=|/?>|/\\*|//)",
			"captures": {
				"1": {
					"name": "entity.other.attribute-name.namespace.inox"
				},
				"2": {
					"name": "punctuation.separator.namespace.inox"
				},
				"3": {
					"name": "entity.other.attribute-name.inox"
				}
			}
		},
		"xml-tag-attribute-assignment": {
			"name": "keyword.operator.assignment.inox",
			"match": "=(?=\\s*(?:'|\"|`|{|\\[|%|\\.|\\/[^>]|<|[a-zA-Z0-9_]|\\$|@|/\\*|//|\\n))"
		},
		"xml-string-double-quoted": {
			"name": "string.quoted.double.inox",
			"begin": "\"",
			"end": "\"",
			"beginCaptures": {
				"0": {
					"name": "punctuation.definition.string.begin.inox"
				}
			},
			"endCaptures": {
				"0": {
					"name": "punctuation.definition.string.end.inox"
				}
			},
			"patterns": [
				{
					"include": "#xml-entities"
				}
			]
		},
		"xml-string-back-quoted": {
			"name": "string.quoted.double.inox",
			"begin": "`",
			"end": "`",
			"beginCaptures": {
				"0": {
					"name": "punctuation.definition.string.begin.inox"
				}
			},
			"endCaptures": {
				"0": {
					"name": "punctuation.definition.string.end.inox"
				}
			},
			"patterns": [
				{
					"include": "#xml-entities"
				}
			]
		},
		"xml-tag-attributes-illegal": {
			"name": "invalid.illegal.attribute.inox",
			"match": "\\S+"
		},
		"client-side-xml-interpolation": {
			"match": "(\\$\\()([^)]*)(\\))",
			"captures": {
				"1": {
					"name": "punctuation.definition.template-expression.begin"
				},
				"2": {
					"patterns": [
						{
							"match": "[_a-zA-Z-]+",
							"name": "variable.signal.inox"
						},
						{
							"begin": "'",
							"end": "'",
							"patterns": [
								{
									"include": "#stringcontent"
								}
							]
						},
						{
							"match": "[^\\S:]+",
							"name": "invalid.illegal.attribute.inox"
						}
					]
				},
				"3": {
					"name": "punctuation.definition.template-expression.end"
				}
			}
		},
		"multiline-concatenation": {
			"begin": "(?<=\\(\\s*concat)",
			"patterns": [
				{
					"include": "#expressions-and-comments"
				}
			],
			"end": "\\)"
		},
		"expressions-and-comments": {
			"patterns": [
				{
					"include": "#assignment-operators"
				},
				{
					"include": "#struct-literals"
				},
				{
					"include": "#anon-struct-literals"
				},
				{
					"include": "#new-expressions"
				},
				{
					"include": "#hs-script-tag-expression"
				},
				{
					"include": "#js-script-tag-expression"
				},
				{
					"include": "#style-tag-expression"
				},
				{
					"include": "#xml-expression"
				},
				{
					"include": "#css-selectors"
				},
				{
					"include": "#quoted-statements"
				},
				{
					"include": "#complex-string-patterns"
				},
				{
					"include": "#url-patterns"
				},
				{
					"include": "#option-patterns"
				},
				{
					"include": "#object-patterns"
				},
				{
					"include": "#list-patterns"
				},
				{
					"include": "#union-patterns"
				},
				{
					"include": "#pattern-calls"
				},
				{
					"include": "#pattern-conversions"
				},
				{
					"include": "#functions"
				},
				{
					"include": "#keywords"
				},
				{
					"include": "#meta-call-expressions"
				},
				{
					"include": "#meta-member-expressions"
				},
				{
					"include": "#meta-identifiers"
				},
				{
					"include": "#function-call-expressions"
				},
				{
					"include": "#key-lists"
				},
				{
					"include": "#variables"
				},
				{
					"include": "#ports"
				},
				{
					"include": "#numbers"
				},
				{
					"include": "#constants"
				},
				{
					"include": "#value-path-literals"
				},
				{
					"include": "#comments"
				},
				{
					"include": "#host-patterns"
				},
				{
					"include": "#hosts"
				},
				{
					"include": "#urls"
				},
				{
					"include": "#path-patterns"
				},
				{
					"include": "#paths"
				},
				{
					"include": "#regexps"
				},
				{
					"include": "#option-names"
				},
				{
					"include": "#strings"
				},
				{
					"include": "#template-literals"
				},
				{
					"include": "#runes"
				},
				{
					"include": "#named-patterns"
				},
				{
					"include": "#identifiers"
				},
				{
					"include": "#lists"
				},
				{
					"include": "#objects"
				}
			]
		}
	},
	"scopeName": "source.inox"
}